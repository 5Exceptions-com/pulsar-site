"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[83228],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),m=r,d=h["".concat(s,".").concat(m)]||h[m]||p[m]||i;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),r=n(67294),i=n(86010),o=n(72389),l=n(67392),s=n(7094),c=n(12466);const u="tabList__CuJ",p="tabItem_LNqP";function h(e){var t;const{lazy:n,block:o,defaultValue:h,values:m,groupId:d,className:k}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,l.l)(y,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===h?h:h??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:T}=(0,s.U)(),[C,N]=(0,r.useState)(b),S=[],{blockElementScrollPositionUntilNextRender:w}=(0,c.o5)();if(null!=d){const e=v[d];null!=e&&e!==C&&y.some((t=>t.value===e))&&N(e)}const P=e=>{const t=e.currentTarget,n=S.indexOf(t),a=y[n].value;a!==C&&(w(t),N(a),null!=d&&T(d,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;n=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;n=S[t]??S[S.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},k)},y.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>S.push(e),onKeyDown:x,onClick:P},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,o.Z)();return r.createElement(h,(0,a.Z)({key:String(t)},e))}},14989:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),i=n(65488),o=n(85162);const l={id:"security-tls-authentication",title:"Authentication using TLS",sidebar_label:"Authentication using TLS"},s=void 0,c={unversionedId:"security-tls-authentication",id:"security-tls-authentication",title:"Authentication using TLS",description:"TLS authentication overview",source:"@site/docs/security-tls-authentication.md",sourceDirName:".",slug:"/security-tls-authentication",permalink:"/docs/next/security-tls-authentication",draft:!1,editUrl:"https://github.com/apache/pulsar/edit/master/site2/docs/security-tls-authentication.md",tags:[],version:"current",frontMatter:{id:"security-tls-authentication",title:"Authentication using TLS",sidebar_label:"Authentication using TLS"},sidebar:"docsSidebar",previous:{title:"Bouncy Castle Providers",permalink:"/docs/next/security-bouncy-castle"},next:{title:"Authentication using JWT",permalink:"/docs/next/security-jwt"}},u={},p=[{value:"TLS authentication overview",id:"tls-authentication-overview",level:2},{value:"Create client certificates",id:"create-client-certificates",level:2},{value:"Enable TLS authentication on brokers",id:"enable-tls-authentication-on-brokers",level:2},{value:"Enable TLS authentication on proxies",id:"enable-tls-authentication-on-proxies",level:2},{value:"Configure TLS authentication in Pulsar clients",id:"configure-tls-authentication-in-pulsar-clients",level:2},{value:"Configure TLS authentication in CLI tools",id:"configure-tls-authentication-in-cli-tools",level:2},{value:"Configure TLS authentication with KeyStore",id:"configure-tls-authentication-with-keystore",level:2},{value:"Configure brokers",id:"configure-brokers",level:3},{value:"Configure clients",id:"configure-clients",level:3},{value:"Enable TLS Logging",id:"enable-tls-logging",level:2}],h={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"tls-authentication-overview"},"TLS authentication overview"),(0,r.kt)("p",null,"TLS authentication is an extension of ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport"},"TLS transport encryption"),". Not only servers have keys and certs that the client uses to verify the identity of servers, clients also have keys and certs that the server uses to verify the identity of clients. You must have TLS transport encryption configured on your cluster before you can use TLS authentication. This guide assumes you already have TLS transport encryption configured."),(0,r.kt)("h2",{id:"create-client-certificates"},"Create client certificates"),(0,r.kt)("p",null,"Client certificates are generated using the certificate authority. Server certificates are also generated with the same certificate authority."),(0,r.kt)("p",null,"The biggest difference between client certs and server certs is that the ",(0,r.kt)("strong",{parentName:"p"},"common name")," for the client certificate is the ",(0,r.kt)("strong",{parentName:"p"},"role token")," that the client is authenticated as."),(0,r.kt)("p",null,"To use client certificates, you need to set ",(0,r.kt)("inlineCode",{parentName:"p"},"tlsRequireTrustedClientCertOnConnect=true")," at the broker side. For details, refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport#configure-brokers"},"TLS broker configuration"),"."),(0,r.kt)("p",null,"First, you need to enter the following command to generate the key :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out admin.key.pem 2048\n")),(0,r.kt)("p",null,"Similar to the broker, the client expects the key to be in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PKCS_8"},"PKCS 8")," format, so you need to convert it by entering the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl pkcs8 -topk8 -inform PEM -outform PEM \\\n    -in admin.key.pem -out admin.key-pk8.pem -nocrypt\n")),(0,r.kt)("p",null,"Next, enter the command below to generate the certificate request. When you are asked for a ",(0,r.kt)("strong",{parentName:"p"},"common name"),", enter the ",(0,r.kt)("strong",{parentName:"p"},"role token")," that you want this key pair to authenticate a client as."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -config openssl.cnf \\\n    -key admin.key.pem -new -sha256 -out admin.csr.pem\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl.cnf")," is not specified, read ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport#create-a-certificate-authority"},"Certificate authority")," to get ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl.cnf"),".")),(0,r.kt)("p",null,"Then, enter the command below to sign with a request with the certificate authority. Note that the client certs use the ",(0,r.kt)("strong",{parentName:"p"},"usr_cert")," extension, which allows the cert to be used for client authentication."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl ca -config openssl.cnf -extensions usr_cert \\\n    -days 1000 -notext -md sha256 \\\n    -in admin.csr.pem -out admin.cert.pem\n")),(0,r.kt)("p",null,"You can get a cert, ",(0,r.kt)("inlineCode",{parentName:"p"},"admin.cert.pem"),", and a key, ",(0,r.kt)("inlineCode",{parentName:"p"},"admin.key-pk8.pem")," from this command. With ",(0,r.kt)("inlineCode",{parentName:"p"},"ca.cert.pem"),", clients can use this cert and this key to authenticate themselves to brokers and proxies as the role token ",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'If the "unable to load CA private key" error occurs and the reason for this error is "No such file or directory: /etc/pki/CA/private/cakey.pem" in this step. Try the command below to generate ',(0,r.kt)("inlineCode",{parentName:"p"},"cakey.pem"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd /etc/pki/tls/misc/CA\n./CA -newca\n"))),(0,r.kt)("h2",{id:"enable-tls-authentication-on-brokers"},"Enable TLS authentication on brokers"),(0,r.kt)("p",null,"To configure brokers to authenticate clients, add the following parameters to ",(0,r.kt)("inlineCode",{parentName:"p"},"broker.conf"),", alongside ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport#configure-brokers"},"the configuration to enable TLS transport"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},'# Configuration to enable authentication\nauthenticationEnabled=true\nauthenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls\ntlsRequireTrustedClientCertOnConnect=true\n\nbrokerClientAuthenticationPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls\nbrokerClientAuthenticationParameters={"tlsCertFile":"/path/my-ca/admin.cert.pem","tlsKeyFile":"/path/my-ca/admin.key-pk8.pem"}\nbrokerClientTrustCertsFilePath=/path/my-ca/certs/ca.cert.pem\n')),(0,r.kt)("h2",{id:"enable-tls-authentication-on-proxies"},"Enable TLS authentication on proxies"),(0,r.kt)("p",null,"To configure proxies to authenticate clients, add the following parameters to ",(0,r.kt)("inlineCode",{parentName:"p"},"proxy.conf"),", alongside ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport#configure-proxies"},"the configuration to enable TLS transport"),":"),(0,r.kt)("p",null,"The proxy should have its own client key pair for connecting to brokers. You need to configure the role token for this key pair in the ",(0,r.kt)("inlineCode",{parentName:"p"},"proxyRoles")," of the brokers. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-authorization"},"authorization guide")," for more details."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"# For clients connecting to the proxy\nauthenticationEnabled=true\nauthenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls\ntlsRequireTrustedClientCertOnConnect=true\n\n# For the proxy to connect to brokers\nbrokerClientAuthenticationPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls\nbrokerClientAuthenticationParameters=tlsCertFile:/path/to/proxy.cert.pem,tlsKeyFile:/path/to/proxy.key-pk8.pem\n")),(0,r.kt)("h2",{id:"configure-tls-authentication-in-pulsar-clients"},"Configure TLS authentication in Pulsar clients"),(0,r.kt)("p",null,"When using TLS authentication, clients connect via TLS transport. You need to configure clients to use ",(0,r.kt)("inlineCode",{parentName:"p"},"https://")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"8443")," port for the web service URL, use ",(0,r.kt)("inlineCode",{parentName:"p"},"pulsar+ssl://")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"6651")," port for the broker service URL."),(0,r.kt)(i.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"},{label:"C++",value:"C++"},{label:"Node.js",value:"Node.js"},{label:"Go",value:"Go"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient client = PulsarClient.builder()\n    .serviceUrl("pulsar+ssl://broker.example.com:6651/")\n    .tlsTrustCertsFilePath("/path/to/ca.cert.pem")\n    .authentication("org.apache.pulsar.client.impl.auth.AuthenticationTls",\n                    "tlsCertFile:/path/to/my-role.cert.pem,tlsKeyFile:/path/to/my-role.key-pk8.pem")\n    .build();\n'))),(0,r.kt)(o.Z,{value:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pulsar import Client, AuthenticationTLS\n\nauth = AuthenticationTLS("/path/to/my-role.cert.pem", "/path/to/my-role.key-pk8.pem")\nclient = Client("pulsar+ssl://broker.example.com:6651/",\n                tls_trust_certs_file_path="/path/to/ca.cert.pem",\n                tls_allow_insecure_connection=False,\n                authentication=auth)\n'))),(0,r.kt)(o.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <pulsar/Client.h>\n\npulsar::ClientConfiguration config;\nconfig.setUseTls(true);\nconfig.setTlsTrustCertsFilePath("/path/to/ca.cert.pem");\nconfig.setTlsAllowInsecureConnection(false);\n\npulsar::AuthenticationPtr auth = pulsar::AuthTls::create("/path/to/my-role.cert.pem",\n                                                         "/path/to/my-role.key-pk8.pem")\nconfig.setAuth(auth);\n\npulsar::Client client("pulsar+ssl://broker.example.com:6651/", config);\n'))),(0,r.kt)(o.Z,{value:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Pulsar = require('pulsar-client');\n\n(async () => {\n  const auth = new Pulsar.AuthenticationTls({\n    certificatePath: '/path/to/my-role.cert.pem',\n    privateKeyPath: '/path/to/my-role.key-pk8.pem',\n  });\n\n  const client = new Pulsar.Client({\n    serviceUrl: 'pulsar+ssl://broker.example.com:6651/',\n    authentication: auth,\n    tlsTrustCertsFilePath: '/path/to/ca.cert.pem',\n  });\n})();\n"))),(0,r.kt)(o.Z,{value:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'client, err := pulsar.NewClient(ClientOptions{\n        URL:                   "pulsar+ssl://broker.example.com:6651/",\n        TLSTrustCertsFilePath: "/path/to/ca.cert.pem",\n        Authentication:        pulsar.NewAuthenticationTLS("/path/to/my-role.cert.pem", "/path/to/my-role.key-pk8.pem"),\n    })\n'))),(0,r.kt)(o.Z,{value:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var clientCertificate = new X509Certificate2("admin.pfx");\nvar client = PulsarClient.Builder()\n                         .AuthenticateUsingClientCertificate(clientCertificate)\n                         .Build();\n')))),(0,r.kt)("h2",{id:"configure-tls-authentication-in-cli-tools"},"Configure TLS authentication in CLI tools"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/next/reference-cli-tools"},"Command-line tools")," like ",(0,r.kt)("a",{href:"/tools/pulsar-admin/",target:"_blank"},(0,r.kt)("inlineCode",{parentName:"p"},"pulsar-admin")),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/reference-cli-tools"},(0,r.kt)("inlineCode",{parentName:"a"},"pulsar-perf")),", and ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/reference-cli-tools"},(0,r.kt)("inlineCode",{parentName:"a"},"pulsar-client"))," use the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/client.conf")," config file in a Pulsar installation."),(0,r.kt)("p",null,"To use TLS authentication with the CLI tools of Pulsar, you need to add the following parameters to the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/client.conf")," file, alongside ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport#configure-tls-encryption-in-cli-tools"},"the configuration to enable TLS encryption"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"authPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls\nauthParams=tlsCertFile:/path/to/my-role.cert.pem,tlsKeyFile:/path/to/my-role.key-pk8.pem\n")),(0,r.kt)("h2",{id:"configure-tls-authentication-with-keystore"},"Configure TLS authentication with KeyStore"),(0,r.kt)("p",null,"Apache Pulsar supports ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport"},"TLS encryption")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-authentication"},"TLS authentication")," between clients and Apache Pulsar service. By default, it uses PEM format file configuration. This section tries to describe how to use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Java_KeyStore"},"KeyStore")," type to configure TLS."),(0,r.kt)("h3",{id:"configure-brokers"},"Configure brokers"),(0,r.kt)("p",null,"Configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"broker.conf")," file as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},'# Configuration to enable authentication\nauthenticationEnabled=true\nauthenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls\n\n# Enable KeyStore type\ntlsEnabledWithKeyStore=true\ntlsRequireTrustedClientCertOnConnect=true\n\n# key store\ntlsKeyStoreType=JKS\ntlsKeyStore=/var/private/tls/broker.keystore.jks\ntlsKeyStorePassword=brokerpw\n\n# trust store\ntlsTrustStoreType=JKS\ntlsTrustStore=/var/private/tls/broker.truststore.jks\ntlsTrustStorePassword=brokerpw\n\n# internal client/admin-client config\nbrokerClientTlsEnabled=true\nbrokerClientTlsEnabledWithKeyStore=true\nbrokerClientTlsTrustStoreType=JKS\nbrokerClientTlsTrustStore=/var/private/tls/client.truststore.jks\nbrokerClientTlsTrustStorePassword=clientpw\n# internal auth config\nbrokerClientAuthenticationPlugin=org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls\nbrokerClientAuthenticationParameters={"keyStoreType":"JKS","keyStorePath":"/var/private/tls/client.keystore.jks","keyStorePassword":"clientpw"}\n')),(0,r.kt)("h3",{id:"configure-clients"},"Configure clients"),(0,r.kt)("p",null,"Besides configuring ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/security-tls-transport"},"TLS encryption"),", you need to configure the KeyStore, which contains a valid CN as client role, for clients."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"for ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/reference-cli-tools"},"Command-line tools")," like ",(0,r.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-admin"},(0,r.kt)("inlineCode",{parentName:"a"},"pulsar-admin")),", ",(0,r.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-perf"},(0,r.kt)("inlineCode",{parentName:"a"},"pulsar-perf")),", and ",(0,r.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-client"},(0,r.kt)("inlineCode",{parentName:"a"},"pulsar-client")),", set the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/client.conf")," file in a Pulsar installation."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-properties"},'webServiceUrl=https://broker.example.com:8443/\nbrokerServiceUrl=pulsar+ssl://broker.example.com:6651/\nuseKeyStoreTls=true\ntlsTrustStoreType=JKS\ntlsTrustStorePath=/var/private/tls/client.truststore.jks\ntlsTrustStorePassword=clientpw\nauthPlugin=org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls\nauthParams={"keyStoreType":"JKS","keyStorePath":"/var/private/tls/client.keystore.jks","keyStorePassword":"clientpw"}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"for Java client"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient client = PulsarClient.builder()\n    .serviceUrl("pulsar+ssl://broker.example.com:6651/")\n    .useKeyStoreTls(true)\n    .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n    .tlsTrustStorePassword("clientpw")\n    .allowTlsInsecureConnection(false)\n    .enableTlsHostnameVerification(false)\n    .authentication(\n            "org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls",\n            "keyStoreType:JKS,keyStorePath:/var/private/tls/client.keystore.jks,keyStorePassword:clientpw")\n    .build();\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"for Java admin client"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    PulsarAdmin amdin = PulsarAdmin.builder().serviceHttpUrl("https://broker.example.com:8443")\n        .useKeyStoreTls(true)\n        .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n        .tlsTrustStorePassword("clientpw")\n        .allowTlsInsecureConnection(false)\n        .enableTlsHostnameVerification(false)\n        .authentication(\n               "org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls",\n               "keyStoreType:JKS,keyStorePath:/var/private/tls/client.keystore.jks,keyStorePassword:clientpw")\n        .build();\n')))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Configure ",(0,r.kt)("inlineCode",{parentName:"p"},"tlsTrustStorePath")," when you set ",(0,r.kt)("inlineCode",{parentName:"p"},"useKeyStoreTls")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,r.kt)("h2",{id:"enable-tls-logging"},"Enable TLS Logging"),(0,r.kt)("p",null,"You can enable TLS debug logging at the JVM level by starting the brokers and/or clients with ",(0,r.kt)("inlineCode",{parentName:"p"},"javax.net.debug")," system property. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"-Djavax.net.debug=all\n")),(0,r.kt)("p",null,"You can find more details on this in ",(0,r.kt)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html"},"Oracle documentation")," on ",(0,r.kt)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html"},"debugging SSL/TLS connections"),"."))}m.isMDXComponent=!0}}]);