"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[9877],{4457:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"2.1.0-incubating","label":"2.1.0-incubating","banner":null,"badge":false,"className":"docs-version-2.1.0-incubating","isLast":true,"docsSidebars":{"version-2.1.0-incubating/docsSidebar":[{"type":"link","label":"About","href":"/docs/2.1.0-incubating/","docId":"about"},{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Pulsar 2.0","href":"/docs/2.1.0-incubating/pulsar-2.0","docId":"pulsar-2.0"},{"type":"link","label":"Run Pulsar locally","href":"/docs/2.1.0-incubating/getting-started-standalone","docId":"getting-started-standalone"},{"type":"link","label":"Pulsar in Docker","href":"/docs/2.1.0-incubating/getting-started-docker","docId":"getting-started-docker"},{"type":"link","label":"Client libraries","href":"/docs/2.1.0-incubating/client-libraries","docId":"client-libraries"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Concepts and Architecture","items":[{"type":"link","label":"Overview","href":"/docs/2.1.0-incubating/concepts-overview","docId":"concepts-overview"},{"type":"link","label":"Messaging","href":"/docs/2.1.0-incubating/concepts-messaging","docId":"concepts-messaging"},{"type":"link","label":"Architecture","href":"/docs/2.1.0-incubating/concepts-architecture-overview","docId":"concepts-architecture-overview"},{"type":"link","label":"Clients","href":"/docs/2.1.0-incubating/concepts-clients","docId":"concepts-clients"},{"type":"link","label":"Geo Replication","href":"/docs/2.1.0-incubating/concepts-replication","docId":"concepts-replication"},{"type":"link","label":"Multi Tenancy","href":"/docs/2.1.0-incubating/concepts-multi-tenancy","docId":"concepts-multi-tenancy"},{"type":"link","label":"Authentication and Authorization","href":"/docs/2.1.0-incubating/concepts-authentication","docId":"concepts-authentication"},{"type":"link","label":"Topic Compaction","href":"/docs/2.1.0-incubating/concepts-topic-compaction","docId":"concepts-topic-compaction"},{"type":"link","label":"Tiered Storage","href":"/docs/2.1.0-incubating/concepts-tiered-storage","docId":"concepts-tiered-storage"},{"type":"link","label":"Schema Registry","href":"/docs/2.1.0-incubating/concepts-schema-registry","docId":"concepts-schema-registry"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Pulsar Functions","items":[{"type":"link","label":"Overview","href":"/docs/2.1.0-incubating/functions-overview","docId":"functions-overview"},{"type":"link","label":"Getting started","href":"/docs/2.1.0-incubating/functions-quickstart","docId":"functions-quickstart"},{"type":"link","label":"API","href":"/docs/2.1.0-incubating/functions-api","docId":"functions-api"},{"type":"link","label":"Deploying functions","href":"/docs/2.1.0-incubating/functions-deploying","docId":"functions-deploying"},{"type":"link","label":"Processing guarantees","href":"/docs/2.1.0-incubating/functions-guarantees","docId":"functions-guarantees"},{"type":"link","label":"State Storage","href":"/docs/2.1.0-incubating/functions-state","docId":"functions-state"},{"type":"link","label":"Metrics","href":"/docs/2.1.0-incubating/functions-metrics","docId":"functions-metrics"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Pulsar IO","items":[{"type":"link","label":"Overview","href":"/docs/2.1.0-incubating/io-overview","docId":"io-overview"},{"type":"link","label":"Getting started","href":"/docs/2.1.0-incubating/io-quickstart","docId":"io-quickstart"},{"type":"link","label":"Managing Connectors","href":"/docs/2.1.0-incubating/io-managing","docId":"io-managing"},{"type":"link","label":"Builtin Connectors","href":"/docs/2.1.0-incubating/io-connectors","docId":"io-connectors"},{"type":"link","label":"Developing Connectors","href":"/docs/2.1.0-incubating/io-develop","docId":"io-develop"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Deployment","items":[{"type":"link","label":"Amazon Web Services","href":"/docs/2.1.0-incubating/deploy-aws","docId":"deploy-aws"},{"type":"link","label":"Kubernetes","href":"/docs/2.1.0-incubating/deploy-kubernetes","docId":"deploy-kubernetes"},{"type":"link","label":"Bare metal","href":"/docs/2.1.0-incubating/deploy-bare-metal","docId":"deploy-bare-metal"},{"type":"link","label":"Bare metal multi-cluster","href":"/docs/2.1.0-incubating/deploy-bare-metal-multi-cluster","docId":"deploy-bare-metal-multi-cluster"},{"type":"link","label":"Monitoring","href":"/docs/2.1.0-incubating/deploy-monitoring","docId":"deploy-monitoring"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Administration","items":[{"type":"link","label":"ZooKeeper and BookKeeper","href":"/docs/2.1.0-incubating/administration-zk-bk","docId":"administration-zk-bk"},{"type":"link","label":"Geo-replication","href":"/docs/2.1.0-incubating/administration-geo","docId":"administration-geo"},{"type":"link","label":"Dashboard","href":"/docs/2.1.0-incubating/administration-dashboard","docId":"administration-dashboard"},{"type":"link","label":"Pulsar statistics","href":"/docs/2.1.0-incubating/administration-stats","docId":"administration-stats"},{"type":"link","label":"Load distribution","href":"/docs/2.1.0-incubating/administration-load-distribution","docId":"administration-load-distribution"},{"type":"link","label":"Pulsar proxy","href":"/docs/2.1.0-incubating/administration-proxy","docId":"administration-proxy"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Security","items":[{"type":"link","label":"Overview","href":"/docs/2.1.0-incubating/security-overview","docId":"security-overview"},{"type":"link","label":"Transport Encryption using TLS","href":"/docs/2.1.0-incubating/security-tls-transport","docId":"security-tls-transport"},{"type":"link","label":"Authentication using TLS","href":"/docs/2.1.0-incubating/security-tls-authentication","docId":"security-tls-authentication"},{"type":"link","label":"Authentication using Athenz","href":"/docs/2.1.0-incubating/security-athenz","docId":"security-athenz"},{"type":"link","label":"Authorization and ACLs","href":"/docs/2.1.0-incubating/security-authorization","docId":"security-authorization"},{"type":"link","label":"End-to-End Encryption","href":"/docs/2.1.0-incubating/security-encryption","docId":"security-encryption"},{"type":"link","label":"Extending","href":"/docs/2.1.0-incubating/security-extending","docId":"security-extending"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Client Libraries","items":[{"type":"link","label":"Java","href":"/docs/2.1.0-incubating/client-libraries-java","docId":"client-libraries-java"},{"type":"link","label":"Go","href":"/docs/2.1.0-incubating/client-libraries-go","docId":"client-libraries-go"},{"type":"link","label":"Python","href":"/docs/2.1.0-incubating/client-libraries-python","docId":"client-libraries-python"},{"type":"link","label":"C++","href":"/docs/2.1.0-incubating/client-libraries-cpp","docId":"client-libraries-cpp"},{"type":"link","label":"WebSocket","href":"/docs/2.1.0-incubating/client-libraries-websocket","docId":"client-libraries-websocket"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Admin API","items":[{"type":"link","label":"Overview","href":"/docs/2.1.0-incubating/admin-api-overview","docId":"admin-api-overview"},{"type":"link","label":"Clusters","href":"/docs/2.1.0-incubating/admin-api-clusters","docId":"admin-api-clusters"},{"type":"link","label":"Tenants","href":"/docs/2.1.0-incubating/admin-api-tenants","docId":"admin-api-tenants"},{"type":"link","label":"Brokers","href":"/docs/2.1.0-incubating/admin-api-brokers","docId":"admin-api-brokers"},{"type":"link","label":"Namespaces","href":"/docs/2.1.0-incubating/admin-api-namespaces","docId":"admin-api-namespaces"},{"type":"link","label":"Permissions","href":"/docs/2.1.0-incubating/admin-api-permissions","docId":"admin-api-permissions"},{"type":"link","label":"Persistent topics","href":"/docs/2.1.0-incubating/admin-api-persistent-topics","docId":"admin-api-persistent-topics"},{"type":"link","label":"Non-Persistent topics","href":"/docs/2.1.0-incubating/admin-api-non-persistent-topics","docId":"admin-api-non-persistent-topics"},{"type":"link","label":"Partitioned topics","href":"/docs/2.1.0-incubating/admin-api-partitioned-topics","docId":"admin-api-partitioned-topics"},{"type":"link","label":"Schemas","href":"/docs/2.1.0-incubating/admin-api-schemas","docId":"admin-api-schemas"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Adaptors","items":[{"type":"link","label":"Kafka client wrapper","href":"/docs/2.1.0-incubating/adaptors-kafka","docId":"adaptors-kafka"},{"type":"link","label":"Apache Spark","href":"/docs/2.1.0-incubating/adaptors-spark","docId":"adaptors-spark"},{"type":"link","label":"Apache Storm","href":"/docs/2.1.0-incubating/adaptors-storm","docId":"adaptors-storm"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Cookbooks","items":[{"type":"link","label":"Tiered Storage","href":"/docs/2.1.0-incubating/cookbooks-tiered-storage","docId":"cookbooks-tiered-storage"},{"type":"link","label":"Topic compaction","href":"/docs/2.1.0-incubating/cookbooks-compaction","docId":"cookbooks-compaction"},{"type":"link","label":"Message deduplication","href":"/docs/2.1.0-incubating/cookbooks-deduplication","docId":"cookbooks-deduplication"},{"type":"link","label":"Non-persistent messaging","href":"/docs/2.1.0-incubating/cookbooks-non-persistent","docId":"cookbooks-non-persistent"},{"type":"link","label":"Partitioned Topics","href":"/docs/2.1.0-incubating/cookbooks-partitioned","docId":"cookbooks-partitioned"},{"type":"link","label":"Message retention and expiry","href":"/docs/2.1.0-incubating/cookbooks-retention-expiry","docId":"cookbooks-retention-expiry"},{"type":"link","label":"Encryption","href":"/docs/2.1.0-incubating/cookbooks-encryption","docId":"cookbooks-encryption"},{"type":"link","label":"Message queue","href":"/docs/2.1.0-incubating/cookbooks-message-queue","docId":"cookbooks-message-queue"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Development","items":[{"type":"link","label":"Simulation tools","href":"/docs/2.1.0-incubating/develop-tools","docId":"develop-tools"},{"type":"link","label":"Binary protocol","href":"/docs/2.1.0-incubating/developing-binary-protocol","docId":"developing-binary-protocol"},{"type":"link","label":"Custom schema storage","href":"/docs/2.1.0-incubating/develop-schema","docId":"develop-schema"},{"type":"link","label":"Modular load manager","href":"/docs/2.1.0-incubating/develop-load-manager","docId":"develop-load-manager"},{"type":"link","label":"Building Pulsar C++ client","href":"/docs/2.1.0-incubating/develop-cpp","docId":"develop-cpp"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Reference","items":[{"type":"link","label":"Terminology","href":"/docs/2.1.0-incubating/reference-terminology","docId":"reference-terminology"},{"type":"link","label":"Pulsar CLI tools","href":"/docs/2.1.0-incubating/reference-cli-tools","docId":"reference-cli-tools"},{"type":"link","label":"Pulsar Admin CLI","href":"/docs/2.1.0-incubating/pulsar-admin","docId":"pulsar-admin"},{"type":"link","label":"Pulsar configuration","href":"/docs/2.1.0-incubating/reference-configuration","docId":"reference-configuration"},{"type":"link","label":"Pulsar REST APIs","href":"/docs/2.1.0-incubating/reference-rest-api-overview","docId":"reference-rest-api-overview"}],"collapsed":true,"collapsible":true}]},"docs":{"about":{"id":"about","title":"Welcome to the doc portal!","description":"*","sidebar":"version-2.1.0-incubating/docsSidebar"},"adaptors-kafka":{"id":"adaptors-kafka","title":"Pulsar adaptor for Apache Kafka","description":"Pulsar provides an easy option for applications that are currently written using the Apache Kafka Java client API.","sidebar":"version-2.1.0-incubating/docsSidebar"},"adaptors-spark":{"id":"adaptors-spark","title":"Pulsar adaptor for Apache Spark","description":"The Spark Streaming receiver for Pulsar is a custom receiver that enables Apache Spark Streaming to receive raw data from Pulsar.","sidebar":"version-2.1.0-incubating/docsSidebar"},"adaptors-storm":{"id":"adaptors-storm","title":"Pulsar adaptor for Apache Storm","description":"Pulsar Storm is an adaptor for integrating with Apache Storm topologies. It provides core Storm implementations for sending and receiving data.","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-brokers":{"id":"admin-api-brokers","title":"Managing Brokers","description":"Pulsar brokers consist of two components:","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-clusters":{"id":"admin-api-clusters","title":"Managing Clusters","description":"Pulsar clusters consist of one or more Pulsar brokers, one or more BookKeeper","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-namespaces":{"id":"admin-api-namespaces","title":"Managing Namespaces","description":"Pulsar namespaces are logical groupings of topics.","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-non-persistent-topics":{"id":"admin-api-non-persistent-topics","title":"Managing non-persistent topics","description":"Non-persistent can be used in applications that only want to consume real time published messages and","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-overview":{"id":"admin-api-overview","title":"The Pulsar admin interface","description":"The Pulsar admin interface enables you to manage all of the important entities in a Pulsar instance, such as tenants, topics, and namespaces.","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-partitioned-topics":{"id":"admin-api-partitioned-topics","title":"Managing partitioned topics","description":"You can use Pulsar\'s admin API to create and manage partitioned topics.","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-permissions":{"id":"admin-api-permissions","title":"Managing permissions","description":"Permissions in Pulsar are managed at the namespace level","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-persistent-topics":{"id":"admin-api-persistent-topics","title":"Managing persistent topics","description":"Persistent helps to access topic which is a logical endpoint for publishing and consuming messages. Producers publish messages to the topic and consumers subscribe to the topic, to consume messages published to the topic.","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-schemas":{"id":"admin-api-schemas","title":"Managing Schemas","description":"Schemas, like other entities in Pulsar, can be managed using the admin API.","sidebar":"version-2.1.0-incubating/docsSidebar"},"admin-api-tenants":{"id":"admin-api-tenants","title":"Managing Tenants","description":"Tenants, like namespaces, can be managed using the admin API. There are currently two configurable aspects of tenants:","sidebar":"version-2.1.0-incubating/docsSidebar"},"administration-dashboard":{"id":"administration-dashboard","title":"The Pulsar dashboard","description":"The Pulsar dashboard is a web application that enables users to monitor current stats for all topics in tabular form.","sidebar":"version-2.1.0-incubating/docsSidebar"},"administration-geo":{"id":"administration-geo","title":"Pulsar geo-replication","description":"Geo-replication is the replication of persistently stored message data across multiple clusters of a Pulsar instance.","sidebar":"version-2.1.0-incubating/docsSidebar"},"administration-load-distribution":{"id":"administration-load-distribution","title":"Pulsar load distribution","description":"Load distribution across Pulsar brokers","sidebar":"version-2.1.0-incubating/docsSidebar"},"administration-proxy":{"id":"administration-proxy","title":"The Pulsar proxy","description":"The Pulsar proxy is an optional gateway that you can run over the brokers in a Pulsar cluster. We recommend running a Pulsar proxy in cases when direction connections between clients and Pulsar brokers are either infeasible, undesirable, or both, for example when running Pulsar in a cloud environment or on Kubernetes or an analogous platform.","sidebar":"version-2.1.0-incubating/docsSidebar"},"administration-stats":{"id":"administration-stats","title":"Pulsar stats","description":"Partitioned topics","sidebar":"version-2.1.0-incubating/docsSidebar"},"administration-zk-bk":{"id":"administration-zk-bk","title":"ZooKeeper and BookKeeper administration","description":"Pulsar relies on two external systems for essential tasks:","sidebar":"version-2.1.0-incubating/docsSidebar"},"client-libraries":{"id":"client-libraries","title":"Pulsar client libraries","description":"Pulsar currently has client libraries available for following languages:","sidebar":"version-2.1.0-incubating/docsSidebar"},"client-libraries-cpp":{"id":"client-libraries-cpp","title":"The Pulsar C++ client","description":"Supported platforms","sidebar":"version-2.1.0-incubating/docsSidebar"},"client-libraries-go":{"id":"client-libraries-go","title":"The Pulsar Go client","description":"The Pulsar Go client can be used to create Pulsar producers, consumers, and readers in Go (aka Golang).","sidebar":"version-2.1.0-incubating/docsSidebar"},"client-libraries-java":{"id":"client-libraries-java","title":"The Pulsar Java client","description":"The Pulsar Java client can be used both to create Java producers, consumers, and readers of messages and to perform administrative tasks. The current version of the Java client is 2.1.0-incubating.","sidebar":"version-2.1.0-incubating/docsSidebar"},"client-libraries-python":{"id":"client-libraries-python","title":"The Pulsar Python client","description":"The Pulsar Python client library is a wrapper over the existing C++ client library and exposes all of the same features]https://pulsar.apache.org/api/cpp/2.1.0-incubating). You can find the code in the [python subdirectory of the C++ client code.","sidebar":"version-2.1.0-incubating/docsSidebar"},"client-libraries-websocket":{"id":"client-libraries-websocket","title":"Pulsar\'s WebSocket API","description":"Pulsar\'s WebSocket API is meant to provide a simple way to interact with Pulsar using languages that do not have an official client library. Through WebSockets you can publish and consume messages and use all the features available in the Java, Python, and C++ client libraries.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-architecture":{"id":"concepts-architecture","title":"Pulsar concepts and architecture","description":""},"concepts-architecture-overview":{"id":"concepts-architecture-overview","title":"Architecture Overview","description":"At the highest level, a Pulsar instance is composed of one or more Pulsar clusters. Clusters within an instance can replicate data amongst themselves.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-authentication":{"id":"concepts-authentication","title":"Authentication and Authorization","description":"Pulsar supports a pluggable authentication mechanism which can be configured at broker and it also supports authorization to identify client and its access rights on topics and tenants.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-clients":{"id":"concepts-clients","title":"Pulsar Clients","description":"Pulsar exposes a client API with language bindings for Java and C++. The client API optimizes and encapsulates Pulsar\'s client-broker communication protocol and exposes a simple and intuitive API for use by applications.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-messaging":{"id":"concepts-messaging","title":"Messaging Concepts","description":"Pulsar is built on the publish-subscribe pattern, aka pub-sub. In this pattern, producers publish messages to topics. Consumers can then subscribe to those topics, process incoming messages, and send an acknowledgement when processing is complete.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-multi-tenancy":{"id":"concepts-multi-tenancy","title":"Multi Tenancy","description":"Pulsar was created from the ground up as a multi-tenant system. To support multi-tenancy, Pulsar has a concept of tenants. Tenants can be spread across clusters and can each have their own authentication and authorization scheme applied to them. They are also the administrative unit at which storage quotas, message TTL, and isolation policies can be managed.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-overview":{"id":"concepts-overview","title":"Pulsar Overview","description":"Pulsar is a multi-tenant, high-performance solution for server-to-server messaging originally developed by Yahoo and now under the stewardship of the Apache Software Foundation.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-replication":{"id":"concepts-replication","title":"Geo Replication","description":"Pulsar enables messages to be produced and consumed in different geo-locations. For instance, your application may be publishing data in one region or market and you would like to process it for consumption in other regions or markets. Geo-replication in Pulsar enables you to do that.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-schema-registry":{"id":"concepts-schema-registry","title":"Schema Registry","description":"Type safety is extremely important in any application built around a message bus like Pulsar. Producers and consumers need some kind of mechanism for coordinating types at the topic level lest a wide variety of potential problems arise (for example serialization and deserialization issues). Applications typically adopt one of two basic approaches to type safety in messaging:","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-tiered-storage":{"id":"concepts-tiered-storage","title":"Tiered Storage","description":"Pulsar\'s segment oriented architecture allows for topic backlogs to grow very large, effectively without limit. However, this can become expensive over time.","sidebar":"version-2.1.0-incubating/docsSidebar"},"concepts-topic-compaction":{"id":"concepts-topic-compaction","title":"Topic Compaction","description":"Pulsar was built with highly scalable persistent storage of message data as a primary objective. Pulsar topics enable you to persistently store as many unacknowledged messages as you need while preserving message ordering. By default, Pulsar stores all unacknowledged/unprocessed messages produced on a topic. Accumulating many unacknowledged messages on a topic is necessary for many Pulsar use cases but it can also be very time intensive for Pulsar consumers to \\"rewind\\" through the entire log of messages.","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-compaction":{"id":"cookbooks-compaction","title":"Topic compaction","description":"Pulsar\'s topic compaction feature enables you to create compacted topics in which older, \\"obscured\\" entries are pruned from the topic, allowing for faster reads through the topic\'s history (which messages are deemed obscured/outdated/irrelevant will depend on your use case).","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-deduplication":{"id":"cookbooks-deduplication","title":"Message deduplication","description":"Message deduplication is a feature of Pulsar that, when enabled, ensures that each message produced on Pulsar topics is persisted to disk only once, even if the message is produced more than once. Message deduplication essentially unburdens Pulsar applications of the responsibility of ensuring deduplication and instead handles it automatically on the server side.","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-encryption":{"id":"cookbooks-encryption","title":"Pulsar Encryption","description":"Pulsar encryption allows applications to encrypt messages at the producer and decrypt at the consumer. Encryption is performed using the public/private key pair configured by the application. Encrypted messages can only be decrypted by consumers with a valid key.","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-message-queue":{"id":"cookbooks-message-queue","title":"Using Pulsar as a message queue","description":"Message queues are essential components of many large-scale data architectures. If every single work object that passes through your system absolutely must be processed in spite of the slowness or downright failure of this or that system component, there\'s a good chance that you\'ll need a message queue to step in and ensure that unprocessed data is retained---with correct ordering---until the required actions are taken.","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-non-persistent":{"id":"cookbooks-non-persistent","title":"Non-persistent messaging","description":"Non-persistent topics are Pulsar topics in which message data is never persistently stored and kept only in memory. This cookbook provides:","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-partitioned":{"id":"cookbooks-partitioned","title":"Non-persistent messaging","description":"By default, Pulsar topics are served by a single broker. Using only a single broker, however, limits a topic\'s maximum throughput. Partitioned topics are a special type of topic that can span multiple brokers and thus allow for much higher throughput. For an explanation of how partitioned topics work, see the Partitioned Topics concepts.","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-retention-expiry":{"id":"cookbooks-retention-expiry","title":"Message retention and expiry","description":"Pulsar brokers are responsible for handling messages that pass through Pulsar, including persistent storage of messages. By default, brokers:","sidebar":"version-2.1.0-incubating/docsSidebar"},"cookbooks-tiered-storage":{"id":"cookbooks-tiered-storage","title":"Tiered Storage","description":"Pulsar\'s Tiered Storage feature allows older backlog data to be offloaded to long term storage, thereby freeing up space in BookKeeper and reducing storage costs. This cookbook walks you through using tiered storage in your Pulsar cluster.","sidebar":"version-2.1.0-incubating/docsSidebar"},"deploy-aws":{"id":"deploy-aws","title":"Deploying a Pulsar cluster on AWS using Terraform and Ansible","description":"For instructions on deploying a single Pulsar cluster manually rather than using Terraform and Ansible, see Deploying a Pulsar cluster on bare metal. For instructions on manually deploying a multi-cluster Pulsar instance, see Deploying a Pulsar instance on bare metal.","sidebar":"version-2.1.0-incubating/docsSidebar"},"deploy-bare-metal":{"id":"deploy-bare-metal","title":"Deploying a cluster on bare metal","description":"1. Single-cluster Pulsar installations should be sufficient for all but the most ambitious use cases. If you\'re interested in experimenting with","sidebar":"version-2.1.0-incubating/docsSidebar"},"deploy-bare-metal-multi-cluster":{"id":"deploy-bare-metal-multi-cluster","title":"Deploying a multi-cluster on bare metal","description":"1. Single-cluster Pulsar installations should be sufficient for all but the most ambitious use cases. If you\'re interested in experimenting with","sidebar":"version-2.1.0-incubating/docsSidebar"},"deploy-dcos":{"id":"deploy-dcos","title":"Deploying Pulsar on DC/OS","description":"If you want to enable all builtin Pulsar IO connectors in your Pulsar deployment, you can choose to use apachepulsar/pulsar-all image instead of"},"deploy-kubernetes":{"id":"deploy-kubernetes","title":"Deploying Pulsar on Kubernetes","description":"If you want to enable all builtin Pulsar IO connectors in your Pulsar deployment, you can choose to use apachepulsar/pulsar-all image instead of","sidebar":"version-2.1.0-incubating/docsSidebar"},"deploy-monitoring":{"id":"deploy-monitoring","title":"Monitoring","description":"There are different ways to monitor a Pulsar cluster, exposing both metrics relative to the usage of topics and the overall health of the individual components of the cluster.","sidebar":"version-2.1.0-incubating/docsSidebar"},"develop-cpp":{"id":"develop-cpp","title":"Building Pulsar C++ client","description":"Supported platforms","sidebar":"version-2.1.0-incubating/docsSidebar"},"develop-load-manager":{"id":"develop-load-manager","title":"Modular load manager","description":"The modular load manager, implemented in  ModularLoadManagerImpl, is a flexible alternative to the previously implemented load manager, SimpleLoadManagerImpl, which attempts to simplify how load is managed while also providing abstractions so that complex load management strategies may be implemented.","sidebar":"version-2.1.0-incubating/docsSidebar"},"develop-schema":{"id":"develop-schema","title":"Custom schema storage","description":"By default, Pulsar stores data type schemas in Apache BookKeeper (which is deployed alongside Pulsar). You can, however, use another storage system if you wish. This doc walks you through creating your own schema storage implementation.","sidebar":"version-2.1.0-incubating/docsSidebar"},"develop-tools":{"id":"develop-tools","title":"Simulation tools","description":"It is sometimes necessary create an test environment and incur artificial load to observe how well load managers","sidebar":"version-2.1.0-incubating/docsSidebar"},"developing-binary-protocol":{"id":"developing-binary-protocol","title":"Pulsar binary protocol specification","description":"Pulsar uses a custom binary protocol for communications between producers/consumers and brokers. This protocol is designed to support required features, such as acknowledgements and flow control, while ensuring maximum transport and implementation efficiency.","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-api":{"id":"functions-api","title":"The Pulsar Functions API","description":"Pulsar Functions provides an easy-to-use API that developers can use to create and manage processing logic for the Apache Pulsar messaging system. With Pulsar Functions, you can write functions of any level of complexity in Java or Python and run them in conjunction with a Pulsar cluster without needing to run a separate stream processing engine.","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-deploying":{"id":"functions-deploying","title":"Deploying and managing Pulsar Functions","description":"At the moment, there are two deployment modes available for Pulsar Functions:","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-guarantees":{"id":"functions-guarantees","title":"Processing guarantees","description":"Pulsar Functions provides three different messaging semantics that you can apply to any function:","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-metrics":{"id":"functions-metrics","title":"Metrics for Pulsar Functions","description":"Pulsar Functions can publish arbitrary metrics to the metrics interface which can then be queried. This doc contains instructions for publishing metrics using the Java and Python Pulsar Functions SDKs.","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-overview":{"id":"functions-overview","title":"Pulsar Functions overview","description":"Pulsar Functions are lightweight compute processes that","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-quickstart":{"id":"functions-quickstart","title":"Getting started with Pulsar Functions","description":"This tutorial will walk you through running a standalone Pulsar cluster on your machine and then running your first Pulsar Functions using that cluster. The first function will run in local run mode (outside your Pulsar cluster), while the second will run in cluster mode (inside your cluster).","sidebar":"version-2.1.0-incubating/docsSidebar"},"functions-state":{"id":"functions-state","title":"Pulsar Functions State Storage (Developer Preview)","description":"Since Pulsar 2.1.0 release, Pulsar integrates with Apache BookKeeper table service","sidebar":"version-2.1.0-incubating/docsSidebar"},"getting-started-docker":{"id":"getting-started-docker","title":"Start a standalone cluster with Docker","description":"For the purposes of local development and testing, you can run Pulsar in standalone","sidebar":"version-2.1.0-incubating/docsSidebar"},"getting-started-standalone":{"id":"getting-started-standalone","title":"Setting up a local standalone cluster","description":"For the purposes of local development and testing, you can run Pulsar in standalone mode on your own machine. Standalone mode includes a Pulsar broker as well as the necessary ZooKeeper and BookKeeper components running inside of a single Java Virtual Machine (JVM) process.","sidebar":"version-2.1.0-incubating/docsSidebar"},"io-aerospike":{"id":"io-aerospike","title":"Aerospike Sink Connector","description":"The Aerospike Sink connector is used to write messages to an Aerospike Cluster."},"io-cassandra":{"id":"io-cassandra","title":"Cassandra Sink Connector","description":"The Cassandra Sink connector is used to write messages to a Cassandra Cluster."},"io-connectors":{"id":"io-connectors","title":"Builtin Connectors","description":"Pulsar distribution includes a set of common connectors that have been packaged and tested with the rest of Apache Pulsar.","sidebar":"version-2.1.0-incubating/docsSidebar"},"io-develop":{"id":"io-develop","title":"Develop Connectors","description":"This guide describes how developers can write new connectors for Pulsar IO to move data","sidebar":"version-2.1.0-incubating/docsSidebar"},"io-kafka":{"id":"io-kafka","title":"Kafka Connector","description":"Source"},"io-kinesis":{"id":"io-kinesis","title":"AWS Kinesis Connector","description":"Sink"},"io-managing":{"id":"io-managing","title":"Managing Connectors","description":"This section describes how to manage Pulsar IO connectors in a Pulsar cluster. You will learn how to:","sidebar":"version-2.1.0-incubating/docsSidebar"},"io-overview":{"id":"io-overview","title":"Pulsar IO Overview","description":"Messaging systems are most powerful when you can easily use them in conjunction with external systems like databases and other messaging systems. Pulsar IO is a feature of Pulsar that enables you to easily create, deploy, and manage Pulsar connectors that interact with external systems, such as Apache Cassandra, Aerospike, and many others.","sidebar":"version-2.1.0-incubating/docsSidebar"},"io-quickstart":{"id":"io-quickstart","title":"Tutorial: Connecting Pulsar with Apache Cassandra","description":"This tutorial provides a hands-on look at how you can move data out of Pulsar without writing a single line of code.","sidebar":"version-2.1.0-incubating/docsSidebar"},"io-rabbitmq":{"id":"io-rabbitmq","title":"RabbitMQ Connector","description":"Source"},"io-twitter":{"id":"io-twitter","title":"Twitter Firehose Connector","description":"The Twitter Firehose connector is used for receiving tweets from Twitter Firehose and writing"},"pulsar-2.0":{"id":"pulsar-2.0","title":"Pulsar 2.0","description":"Pulsar 2.0 is a major new release for Pulsar that brings some bold changes to the platform, including simplified topic names, the addition of the Pulsar Functions feature, some terminology changes, and more.","sidebar":"version-2.1.0-incubating/docsSidebar"},"pulsar-admin":{"id":"pulsar-admin","title":"Pulsar admin CLI","description":"Important","sidebar":"version-2.1.0-incubating/docsSidebar"},"reference-cli-tools":{"id":"reference-cli-tools","title":"Pulsar command-line tools","description":"Pulsar offers several command-line tools that you can use for managing Pulsar installations, performance testing, using command-line producers and consumers, and more.","sidebar":"version-2.1.0-incubating/docsSidebar"},"reference-configuration":{"id":"reference-configuration","title":"Pulsar configuration","description":"Pulsar configuration can be managed either via a series of configuration files contained in the conf directory of a Pulsar installation","sidebar":"version-2.1.0-incubating/docsSidebar"},"reference-pulsar-admin":{"id":"reference-pulsar-admin","title":"Pulsar admin CLI","description":"The pulsar-admin tool enables you to manage Pulsar installations, including clusters, brokers, namespaces, tenants, and more."},"reference-rest-api-overview":{"id":"reference-rest-api-overview","title":"Pulsar REST APIs","description":"A REST API (also known as RESTful API, REpresentational State Transfer Application Programming Interface) is a set of definitions and protocols for building and integrating application software, using HTTP requests to GET, PUT, POST, and DELETE data following the REST standards. In essence, REST API is a set of remote calls using standard methods to request and return data in a specific format between two systems.","sidebar":"version-2.1.0-incubating/docsSidebar"},"reference-terminology":{"id":"reference-terminology","title":"Pulsar Terminology","description":"Here is a glossary of terms related to Apache Pulsar:","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-athenz":{"id":"security-athenz","title":"Authentication using Athenz","description":"Athenz is a role-based authentication/authorization system. In Pulsar, Athenz role tokens (aka z-tokens) can be used to establish the identify of the client.","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-authorization":{"id":"security-authorization","title":"Authentication and authorization in Pulsar","description":"In Pulsar, the authentication provider is charged with properly identifying clients and","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-encryption":{"id":"security-encryption","title":"Pulsar Encryption","description":"Pulsar encryption allows applications to encrypt messages at the producer and decrypt at the consumer. Encryption is performed using the public/private key pair configured by the application. Encrypted messages can only be decrypted by consumers with a valid key.","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-extending":{"id":"security-extending","title":"Extending Authentication and Authorization in Pulsar","description":"Pulsar provides a way to use custom authentication and authorization mechanisms","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-overview":{"id":"security-overview","title":"Pulsar Security Overview","description":"Apache Pulsar is the central message bus for a business. It is frequently used to store mission-critical data, and therefore enabling security features are crucial.","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-tls-authentication":{"id":"security-tls-authentication","title":"Authentication using TLS","description":"TLS Authentication Overview","sidebar":"version-2.1.0-incubating/docsSidebar"},"security-tls-transport":{"id":"security-tls-transport","title":"Transport Encryption using TLS","description":"TLS Overview","sidebar":"version-2.1.0-incubating/docsSidebar"},"standalone":{"id":"standalone","title":"Setting up a local standalone cluster","description":"For the purposes of local development and testing, you can run Pulsar in standalone mode on your own machine. Standalone mode includes a Pulsar broker as well as the necessary ZooKeeper and BookKeeper components running inside of a single Java Virtual Machine (JVM) process."}}}')}}]);