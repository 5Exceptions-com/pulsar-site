"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[43514],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=d(a),u=r,k=c["".concat(s,".").concat(u)]||c[u]||p[u]||o;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},93749:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=["components"],l={id:"develop-binary-protocol",title:"Pulsar binary protocol specification",sidebar_label:"Binary protocol"},s=void 0,d={unversionedId:"develop-binary-protocol",id:"develop-binary-protocol",title:"Pulsar binary protocol specification",description:"Important",source:"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/develop-binary-protocol.md",sourceDirName:".",slug:"/develop-binary-protocol",permalink:"/zh-TW/docs/next/develop-binary-protocol",draft:!1,editUrl:"https://github.com/apache/pulsar/edit/master/site2/docs/develop-binary-protocol.md",tags:[],version:"current",frontMatter:{id:"develop-binary-protocol",title:"Pulsar binary protocol specification",sidebar_label:"Binary protocol"}},m={},p=[{value:"Framing",id:"framing",level:2},{value:"Simple commands",id:"simple-commands",level:3},{value:"Payload commands",id:"payload-commands",level:3},{value:"Broker entry metadata",id:"broker-entry-metadata",level:2},{value:"Message metadata",id:"message-metadata",level:2},{value:"Batch messages",id:"batch-messages",level:3},{value:"Interactions",id:"interactions",level:2},{value:"Connection establishment",id:"connection-establishment",level:3},{value:"Keep Alive",id:"keep-alive",level:3},{value:"Producer",id:"producer",level:3},{value:"Command Producer",id:"command-producer",level:5},{value:"Command ProducerSuccess",id:"command-producersuccess",level:5},{value:"Command Send",id:"command-send",level:5},{value:"Command SendReceipt",id:"command-sendreceipt",level:5},{value:"Command CloseProducer",id:"command-closeproducer",level:5},{value:"Consumer",id:"consumer",level:3},{value:"Flow control",id:"flow-control",level:4},{value:"Command Subscribe",id:"command-subscribe",level:5},{value:"Command Flow",id:"command-flow",level:5},{value:"Command Message",id:"command-message",level:5},{value:"Command Ack",id:"command-ack",level:5},{value:"Command CloseConsumer",id:"command-closeconsumer",level:5},{value:"Command RedeliverUnacknowledgedMessages",id:"command-redeliverunacknowledgedmessages",level:5},{value:"Command ReachedEndOfTopic",id:"command-reachedendoftopic",level:5},{value:"Command ConsumerStats",id:"command-consumerstats",level:5},{value:"Command ConsumerStatsResponse",id:"command-consumerstatsresponse",level:5},{value:"Command Unsubscribe",id:"command-unsubscribe",level:5},{value:"Service discovery",id:"service-discovery",level:2},{value:"Topic lookup",id:"topic-lookup",level:3},{value:"LookupTopicResponse",id:"lookuptopicresponse",level:5},{value:"Partitioned topics discovery",id:"partitioned-topics-discovery",level:3},{value:"Command PartitionedTopicMetadata",id:"command-partitionedtopicmetadata",level:5},{value:"Command PartitionedTopicMetadataResponse",id:"command-partitionedtopicmetadataresponse",level:5},{value:"Protobuf interface",id:"protobuf-interface",level:2}],c={toc:p};function u(e){var t=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Important")),(0,o.kt)("p",{parentName:"div"},"This page is deprecated and not updated anymore. For the latest and complete information, see ",(0,o.kt)("a",{parentName:"p",href:"/zh-TW/docs/next/developing-binary-protocol"},"Pulsar binary protocol specification"),"."))),(0,o.kt)("p",null,"Pulsar uses a custom binary protocol for communications between producers/consumers and brokers. This protocol is designed to support required features, such as acknowledgements and flow control, while ensuring maximum transport and implementation efficiency."),(0,o.kt)("p",null,"Clients and brokers exchange ",(0,o.kt)("em",{parentName:"p"},"commands")," with each other. Commands are formatted as binary ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protocol buffer")," (aka ",(0,o.kt)("em",{parentName:"p"},"protobuf"),") messages. The format of protobuf commands is specified in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/pulsar-common/src/main/proto/PulsarApi.proto"},(0,o.kt)("inlineCode",{parentName:"a"},"PulsarApi.proto"))," file and also documented in the ",(0,o.kt)("a",{parentName:"p",href:"#protobuf-interface"},"Protobuf interface")," section below."),(0,o.kt)("blockquote",null,(0,o.kt)("h3",{parentName:"blockquote",id:"connection-sharing"},"Connection sharing"),(0,o.kt)("p",{parentName:"blockquote"},"Commands for different producers and consumers can be interleaved and sent through the same connection without restriction.")),(0,o.kt)("p",null,"All commands associated with Pulsar's protocol are contained in a ",(0,o.kt)("a",{parentName:"p",href:"#pulsar.proto.BaseCommand"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseCommand"))," protobuf message that includes a ",(0,o.kt)("a",{parentName:"p",href:"#pulsar.proto.Type"},(0,o.kt)("inlineCode",{parentName:"a"},"Type"))," ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto#enum"},"enum")," with all possible subcommands as optional fields. ",(0,o.kt)("inlineCode",{parentName:"p"},"BaseCommand")," messages can specify only one subcommand."),(0,o.kt)("h2",{id:"framing"},"Framing"),(0,o.kt)("p",null,"Since protobuf doesn't provide any sort of message frame, all messages in the Pulsar protocol are prepended with a 4-byte field that specifies the size of the frame. The maximum allowable size of a single frame is 5 MB."),(0,o.kt)("p",null,"The Pulsar protocol allows for two types of commands:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Simple commands")," that do not carry a message payload."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Payload commands")," that bear a payload that is used when publishing or delivering messages. In payload commands, the protobuf command data is followed by protobuf ",(0,o.kt)("a",{parentName:"li",href:"#message-metadata"},"metadata")," and then the payload, which is passed in raw format outside of protobuf. All sizes are passed as 4-byte unsigned big endian integers.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Message payloads are passed in raw format rather than protobuf format for efficiency reasons.")),(0,o.kt)("h3",{id:"simple-commands"},"Simple commands"),(0,o.kt)("p",null,"Simple (payload-free) commands have this basic structure:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Component"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Size (in bytes)"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"totalSize")),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the frame, counting everything that comes after it (in bytes)"),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"commandSize")),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the protobuf-serialized command"),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"message")),(0,o.kt)("td",{parentName:"tr",align:"left"},"The protobuf message serialized in a raw binary format (rather than in protobuf format)"),(0,o.kt)("td",{parentName:"tr",align:"left"})))),(0,o.kt)("h3",{id:"payload-commands"},"Payload commands"),(0,o.kt)("p",null,"Payload commands have this basic structure:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Component"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required or optional"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Size (in bytes)"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"totalSize")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the frame, counting everything that comes after it (in bytes)"),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"commandSize")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the protobuf-serialized command"),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"message")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The protobuf message serialized in a raw binary format (rather than in protobuf format)"),(0,o.kt)("td",{parentName:"tr",align:"left"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"magicNumberOfBrokerEntryMetadata")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"A 2-byte byte array (",(0,o.kt)("inlineCode",{parentName:"td"},"0x0e02"),") identifying the broker entry metadata   ",(0,o.kt)("br",null)," ",(0,o.kt)("strong",{parentName:"td"},"Note"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"magicNumberOfBrokerEntryMetadata")," , ",(0,o.kt)("inlineCode",{parentName:"td"},"brokerEntryMetadataSize"),", and ",(0,o.kt)("inlineCode",{parentName:"td"},"brokerEntryMetadata")," should be used ",(0,o.kt)("strong",{parentName:"td"},"together"),"."),(0,o.kt)("td",{parentName:"tr",align:"left"},"2")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"brokerEntryMetadataSize")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the broker entry metadata"),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"brokerEntryMetadata")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The broker entry metadata stored as a binary protobuf message"),(0,o.kt)("td",{parentName:"tr",align:"left"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"magicNumber")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"A 2-byte byte array (",(0,o.kt)("inlineCode",{parentName:"td"},"0x0e01"),") identifying the current format"),(0,o.kt)("td",{parentName:"tr",align:"left"},"2")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"checksum")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"A ",(0,o.kt)("a",{parentName:"td",href:"http://www.evanjones.ca/crc32c.html"},"CRC32-C checksum")," of everything that comes after it"),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"metadataSize")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the message ",(0,o.kt)("a",{parentName:"td",href:"#message-metadata"},"metadata")),(0,o.kt)("td",{parentName:"tr",align:"left"},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"metadata")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The message ",(0,o.kt)("a",{parentName:"td",href:"#message-metadata"},"metadata")," stored as a binary protobuf message"),(0,o.kt)("td",{parentName:"tr",align:"left"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"payload")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Anything left in the frame is considered the payload and can include any sequence of bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"})))),(0,o.kt)("h2",{id:"broker-entry-metadata"},"Broker entry metadata"),(0,o.kt)("p",null,"Broker entry metadata is stored alongside the message metadata as a serialized protobuf message. It is created by the broker when the message arrived at the broker and passed without changes to the consumer if configured."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required or optional"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"broker_timestamp")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The timestamp when a message arrived at the broker (",(0,o.kt)("inlineCode",{parentName:"td"},"id est")," as the number of milliseconds since January 1st, 1970 in UTC)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"index")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The index of the message. It is assigned by the broker.")))),(0,o.kt)("p",null,"If you want to use broker entry metadata for ",(0,o.kt)("strong",{parentName:"p"},"brokers"),", configure the ",(0,o.kt)("a",{parentName:"p",href:"/zh-TW/docs/next/reference-configuration#broker"},(0,o.kt)("inlineCode",{parentName:"a"},"brokerEntryMetadataInterceptors"))," parameter in the ",(0,o.kt)("inlineCode",{parentName:"p"},"broker.conf")," file."),(0,o.kt)("p",null,"If you want to use broker entry metadata for ",(0,o.kt)("strong",{parentName:"p"},"consumers"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the client protocol version ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/ca37e67211feda4f7e0984e6414e707f1c1dfd07/pulsar-common/src/main/proto/PulsarApi.proto#L259"},"18 or later"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure the ",(0,o.kt)("a",{parentName:"p",href:"/zh-TW/docs/next/reference-configuration#broker"},(0,o.kt)("inlineCode",{parentName:"a"},"brokerEntryMetadataInterceptors"))," parameter and set the ",(0,o.kt)("a",{parentName:"p",href:"/zh-TW/docs/next/reference-configuration#broker"},(0,o.kt)("inlineCode",{parentName:"a"},"enableExposingBrokerEntryMetadataToClient"))," parameter to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"broker.conf")," file."))),(0,o.kt)("h2",{id:"message-metadata"},"Message metadata"),(0,o.kt)("p",null,"Message metadata is stored alongside the application-specified payload as a serialized protobuf message. Metadata is created by the producer and passed without changes to the consumer."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required or optional"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"producer_name")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The name of the producer that published the message")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"sequence_id")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The sequence ID of the message, assigned by producer")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"publish_time")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The publish timestamp in Unix time (i.e. as the number of milliseconds since January 1st, 1970 in UTC)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"properties")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"A sequence of key/value pairs (using the ",(0,o.kt)("a",{parentName:"td",href:"https://github.com/apache/pulsar/blob/master/pulsar-common/src/main/proto/PulsarApi.proto#L32"},(0,o.kt)("inlineCode",{parentName:"a"},"KeyValue"))," message). These are application-defined keys and values with no special meaning to Pulsar.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"replicated_from")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Indicates that the message has been replicated and specifies the name of the ",(0,o.kt)("a",{parentName:"td",href:"/zh-TW/docs/next/reference-terminology#cluster"},"cluster")," where the message was originally published")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"partition_key")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"While publishing on a partition topic, if the key is present, the hash of the key is used to determine which partition to choose. Partition key is used as the message key.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"compression")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Signals that payload has been compressed and with which compression library")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"uncompressed_size")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"If compression is used, the producer must fill the uncompressed size field with the original payload size")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"num_messages_in_batch")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"If this message is really a ",(0,o.kt)("a",{parentName:"td",href:"#batch-messages"},"batch")," of multiple entries, this field must be set to the number of messages in the batch")))),(0,o.kt)("h3",{id:"batch-messages"},"Batch messages"),(0,o.kt)("p",null,"When using batch messages, the payload will be containing a list of entries, each of them with its individual metadata, defined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"SingleMessageMetadata")," object."),(0,o.kt)("p",null,"For a single batch, the payload format will look like this:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required or optional"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"metadataSizeN")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the single message metadata serialized Protobuf")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"metadataN")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Single message metadata")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"payloadN")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Message payload passed by application")))),(0,o.kt)("p",null,"Each metadata field looks like this;"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required or optional"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"properties")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Application-defined properties")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"partition key")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Key to indicate the hashing to a particular partition")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"payload_size")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Size of the payload for the single message in the batch")))),(0,o.kt)("p",null,"When compression is enabled, the whole batch will be compressed at once."),(0,o.kt)("h2",{id:"interactions"},"Interactions"),(0,o.kt)("h3",{id:"connection-establishment"},"Connection establishment"),(0,o.kt)("p",null,"After opening a TCP connection to a broker, typically on port 6650, the client is responsible to initiate the session."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Connect interaction",src:a(18234).Z,width:"475",height:"215"})),(0,o.kt)("p",null,"After receiving a ",(0,o.kt)("inlineCode",{parentName:"p"},"Connected")," response from the broker, the client can consider the connection ready to use. Alternatively, if the broker doesn't validate the client authentication, it will reply with an ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," command and close the TCP connection."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandConnect {\n  "client_version" : "Pulsar-Client-Java-v1.15.2",\n  "auth_method_name" : "my-authentication-plugin",\n  "auth_data" : "my-auth-data",\n  "protocol_version" : 6\n}\n\n')),(0,o.kt)("p",null,"Fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"client_version")," \u2192 String based identifier. Format is not enforced"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"auth_method_name")," \u2192 ",(0,o.kt)("em",{parentName:"li"},"(optional)")," Name of the authentication plugin if auth enabled"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"auth_data")," \u2192 ",(0,o.kt)("em",{parentName:"li"},"(optional)")," Plugin specific authentication data"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"protocol_version")," \u2192 Indicates the protocol version supported by the client. Broker will not send commands introduced in newer revisions of the protocol. Broker might be enforcing a minimum version")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandConnected {\n  "server_version" : "Pulsar-Broker-v1.15.2",\n  "protocol_version" : 6\n}\n\n')),(0,o.kt)("p",null,"Fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"server_version")," \u2192 String identifier of broker version"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"protocol_version")," \u2192 Protocol version supported by the broker. Client must not attempt to send commands introduced in newer revisions of the protocol")),(0,o.kt)("h3",{id:"keep-alive"},"Keep Alive"),(0,o.kt)("p",null,"To identify prolonged network partitions between clients and brokers or cases in which a machine crashes without interrupting the TCP connection on the remote end (eg: power outage, kernel panic, hard reboot...), we have introduced a mechanism to probe for the availability status of the remote peer."),(0,o.kt)("p",null,"Both clients and brokers are sending ",(0,o.kt)("inlineCode",{parentName:"p"},"Ping")," commands periodically and they will close the socket if a ",(0,o.kt)("inlineCode",{parentName:"p"},"Pong")," response is not received within a timeout (default used by broker is 60s)."),(0,o.kt)("p",null,"A valid implementation of a Pulsar client is not required to send the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ping")," probe, though it is required to promptly reply after receiving one from the broker in order to prevent the remote side from forcibly closing the TCP connection."),(0,o.kt)("h3",{id:"producer"},"Producer"),(0,o.kt)("p",null,"In order to send messages, a client needs to establish a producer. When creating a producer, the broker will first verify that this particular client is authorized to publish on the topic."),(0,o.kt)("p",null,"Once the client gets confirmation of the producer creation, it can publish messages to the broker, referring to the producer id negotiated before."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Producer interaction",src:a(21760).Z,width:"469",height:"416"})),(0,o.kt)("p",null,"If the client does not receive a response indicating producer creation success or failure, the client should first send a command to close the original producer before sending a command to re-attempt producer creation."),(0,o.kt)("h5",{id:"command-producer"},"Command Producer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandProducer {\n  "topic" : "persistent://my-property/my-cluster/my-namespace/my-topic",\n  "producer_id" : 1,\n  "request_id" : 1\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"topic")," \u2192 Complete topic name to where you want to create the producer on"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"producer_id")," \u2192 Client generated producer identifier. Needs to be unique within the same connection"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Identifier for this request. Used to match the response with the originating request. Needs to be unique within the same connection"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"producer_name")," \u2192 ",(0,o.kt)("em",{parentName:"li"},"(optional)")," If a producer name is specified, the name will be used, otherwise the broker will generate a unique name. Generated producer name is guaranteed to be globally unique. Implementations are expected to let the broker generate a new producer name when the producer is initially created, then reuse it when recreating the producer after reconnections.")),(0,o.kt)("p",null,"The broker will reply with either ",(0,o.kt)("inlineCode",{parentName:"p"},"ProducerSuccess")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," commands."),(0,o.kt)("h5",{id:"command-producersuccess"},"Command ProducerSuccess"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandProducerSuccess {\n  "request_id" :  1,\n  "producer_name" : "generated-unique-producer-name"\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Original id of the ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateProducer")," request"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"producer_name")," \u2192 Generated globally unique producer name or the name specified by the client, if any.")),(0,o.kt)("h5",{id:"command-send"},"Command Send"),(0,o.kt)("p",null,"Command ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," is used to publish a new message within the context of an already existing producer. If a producer has not yet been created for the connection, the broker will terminate the connection. This command is used in a frame that includes command as well as message payload, for which the complete format is specified in the ",(0,o.kt)("a",{parentName:"p",href:"#payload-commands"},"payload commands")," section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandSend {\n  "producer_id" : 1,\n  "sequence_id" : 0,\n  "num_messages" : 1\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"producer_id")," \u2192 id of an existing producer"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sequence_id")," \u2192 each message has an associated sequence id which is expected to be implemented with a counter starting at 0. The ",(0,o.kt)("inlineCode",{parentName:"li"},"SendReceipt")," that acknowledges the effective publishing of a messages will refer to it by its sequence id."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"num_messages")," \u2192 ",(0,o.kt)("em",{parentName:"li"},"(optional)")," Used when publishing a batch of messages at once.")),(0,o.kt)("h5",{id:"command-sendreceipt"},"Command SendReceipt"),(0,o.kt)("p",null,"After a message has been persisted on the configured number of replicas, the broker will send the acknowledgment receipt to the producer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandSendReceipt {\n  "producer_id" : 1,\n  "sequence_id" : 0,\n  "message_id" : {\n    "ledgerId" : 123,\n    "entryId" : 456\n  }\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"producer_id")," \u2192 id of producer originating the send request"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sequence_id")," \u2192 sequence id of the published message"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message_id")," \u2192 message id assigned by the system to the published message Unique within a single cluster. Message id is composed of 2 longs, ",(0,o.kt)("inlineCode",{parentName:"li"},"ledgerId")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"entryId"),", that reflect that this unique id is assigned when appending to a BookKeeper ledger")),(0,o.kt)("h5",{id:"command-closeproducer"},"Command CloseProducer"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": ",(0,o.kt)("em",{parentName:"p"},"This command can be sent by either producer or broker"),"."),(0,o.kt)("p",null,"When receiving a ",(0,o.kt)("inlineCode",{parentName:"p"},"CloseProducer")," command, the broker will stop accepting any more messages for the producer, wait until all pending messages are persisted and then reply ",(0,o.kt)("inlineCode",{parentName:"p"},"Success")," to the client."),(0,o.kt)("p",null,"If the client does not receive a response to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Producer")," command within a timeout, the client must first send a ",(0,o.kt)("inlineCode",{parentName:"p"},"CloseProducer")," command before sending another ",(0,o.kt)("inlineCode",{parentName:"p"},"Producer")," command. The client does not need to await a response to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CloseProducer")," command before sending the next ",(0,o.kt)("inlineCode",{parentName:"p"},"Producer")," command."),(0,o.kt)("p",null,"The broker can send a ",(0,o.kt)("inlineCode",{parentName:"p"},"CloseProducer")," command to client when it's performing a graceful failover (eg: broker is being restarted, or the topic is being unloaded by load balancer to be transferred to a different broker)."),(0,o.kt)("p",null,"When receiving the ",(0,o.kt)("inlineCode",{parentName:"p"},"CloseProducer"),", the client is expected to go through the service discovery lookup again and recreate the producer again. The TCP connection is not affected."),(0,o.kt)("h3",{id:"consumer"},"Consumer"),(0,o.kt)("p",null,"A consumer is used to attach to a subscription and consume messages from it. After every reconnection, a client needs to subscribe to the topic. If a subscription is not already there, a new one will be created."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Consumer",src:a(81682).Z,width:"469",height:"416"})),(0,o.kt)("h4",{id:"flow-control"},"Flow control"),(0,o.kt)("p",null,"After the consumer is ready, the client needs to ",(0,o.kt)("em",{parentName:"p"},"give permission")," to the broker to push messages. This is done with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Flow")," command."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Flow")," command gives additional ",(0,o.kt)("em",{parentName:"p"},"permits")," to send messages to the consumer. A typical consumer implementation will use a queue to accumulate these messages before the application is ready to consume them."),(0,o.kt)("p",null,"After the application has dequeued half of the messages in the queue, the consumer sends permits to the broker to ask for more messages (equals to half of the messages in the queue)."),(0,o.kt)("p",null,"For example, if the queue size is 1000 and the consumer consumes 500 messages in the queue. Then the consumer sends permits to the broker to ask for 500 messages."),(0,o.kt)("h5",{id:"command-subscribe"},"Command Subscribe"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandSubscribe {\n  "topic" : "persistent://my-property/my-cluster/my-namespace/my-topic",\n  "subscription" : "my-subscription-name",\n  "subType" : "Exclusive",\n  "consumer_id" : 1,\n  "request_id" : 1\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"topic")," \u2192 Complete topic name to where you want to create the consumer on"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"subscription")," \u2192 Subscription name"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"subType")," \u2192 Subscription type: Exclusive, Shared, Failover, Key_Shared"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consumer_id")," \u2192 Client generated consumer identifier. Needs to be unique within the same connection"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Identifier for this request. Used to match the response with the originating request. Needs to be unique within the same connection"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consumer_name")," \u2192 ",(0,o.kt)("em",{parentName:"li"},"(optional)")," Clients can specify a consumer name. This name can be used to track a particular consumer in the stats. Also, in Failover subscription type, the name is used to decide which consumer is elected as ",(0,o.kt)("em",{parentName:"li"},"master")," (the one receiving messages): consumers are sorted by their consumer name and the first one is elected master.")),(0,o.kt)("h5",{id:"command-flow"},"Command Flow"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandFlow {\n  "consumer_id" : 1,\n  "messagePermits" : 1000\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consumer_id")," \u2192 Id of an already established consumer"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"messagePermits")," \u2192 Number of additional permits to grant to the broker for pushing more messages")),(0,o.kt)("h5",{id:"command-message"},"Command Message"),(0,o.kt)("p",null,"Command ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," is used by the broker to push messages to an existing consumer, within the limits of the given permits."),(0,o.kt)("p",null,"This command is used in a frame that includes the message payload as well, for which the complete format is specified in the ",(0,o.kt)("a",{parentName:"p",href:"#payload-commands"},"payload commands")," section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandMessage {\n  "consumer_id" : 1,\n  "message_id" : {\n    "ledgerId" : 123,\n    "entryId" : 456\n  }\n}\n\n')),(0,o.kt)("h5",{id:"command-ack"},"Command Ack"),(0,o.kt)("p",null,"An ",(0,o.kt)("inlineCode",{parentName:"p"},"Ack")," is used to signal to the broker that a given message has been successfully processed by the application and can be discarded by the broker."),(0,o.kt)("p",null,"In addition, the broker will also maintain the consumer position based on the acknowledged messages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandAck {\n  "consumer_id" : 1,\n  "ack_type" : "Individual",\n  "message_id" : {\n    "ledgerId" : 123,\n    "entryId" : 456\n  }\n}\n\n')),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consumer_id")," \u2192 Id of an already established consumer"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ack_type")," \u2192 Type of acknowledgment: ",(0,o.kt)("inlineCode",{parentName:"li"},"Individual")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Cumulative")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message_id")," \u2192 Id of the message to acknowledge"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"validation_error")," \u2192 ",(0,o.kt)("em",{parentName:"li"},"(optional)")," Indicates that the consumer has discarded the messages due to: ",(0,o.kt)("inlineCode",{parentName:"li"},"UncompressedSizeCorruption"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"DecompressionError"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"ChecksumMismatch"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"BatchDeSerializeError"))),(0,o.kt)("h5",{id:"command-closeconsumer"},"Command CloseConsumer"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Note")),": *",(0,o.kt)("em",{parentName:"p"},"This command can be sent by either producer or broker"),"."),(0,o.kt)("p",null,"This command behaves the same as ",(0,o.kt)("a",{parentName:"p",href:"#command-closeproducer"},(0,o.kt)("inlineCode",{parentName:"a"},"CloseProducer"))),(0,o.kt)("h5",{id:"command-redeliverunacknowledgedmessages"},"Command RedeliverUnacknowledgedMessages"),(0,o.kt)("p",null,"A consumer can ask the broker to redeliver some or all of the pending messages that were pushed to that particular consumer and not yet acknowledged."),(0,o.kt)("p",null,"The protobuf object accepts a list of message ids that the consumer wants to be redelivered. If the list is empty, the broker will redeliver all the pending messages."),(0,o.kt)("p",null,"On redelivery, messages can be sent to the same consumer or, in the case of a shared subscription, spread across all available consumers."),(0,o.kt)("h5",{id:"command-reachedendoftopic"},"Command ReachedEndOfTopic"),(0,o.kt)("p",null,'This is sent by a broker to a particular consumer, whenever the topic has been "terminated" and all the messages on the subscription were acknowledged.'),(0,o.kt)("p",null,"The client should use this command to notify the application that no more messages are coming from the consumer."),(0,o.kt)("h5",{id:"command-consumerstats"},"Command ConsumerStats"),(0,o.kt)("p",null,"This command is sent by the client to retrieve Subscriber and Consumer level stats from the broker. Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Id of the request, used to correlate the request and the response."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consumer_id")," \u2192 Id of an already established consumer.")),(0,o.kt)("h5",{id:"command-consumerstatsresponse"},"Command ConsumerStatsResponse"),(0,o.kt)("p",null,"This is the broker's response to ConsumerStats request by the client. It contains the Subscriber and Consumer level stats of the ",(0,o.kt)("inlineCode",{parentName:"p"},"consumer_id")," sent in the request. If the ",(0,o.kt)("inlineCode",{parentName:"p"},"error_code")," or the ",(0,o.kt)("inlineCode",{parentName:"p"},"error_message")," field is set it indicates that the request has failed."),(0,o.kt)("h5",{id:"command-unsubscribe"},"Command Unsubscribe"),(0,o.kt)("p",null,"This command is sent by the client to unsubscribe the ",(0,o.kt)("inlineCode",{parentName:"p"},"consumer_id")," from the associated topic. Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Id of the request."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consumer_id")," \u2192 Id of an already established consumer which needs to unsubscribe.")),(0,o.kt)("h2",{id:"service-discovery"},"Service discovery"),(0,o.kt)("h3",{id:"topic-lookup"},"Topic lookup"),(0,o.kt)("p",null,"Topic lookup needs to be performed each time a client needs to create or reconnect a producer or a consumer. Lookup is used to discover which particular broker is serving the topic we are about to use."),(0,o.kt)("p",null,"Lookup can be done with a REST call as described in the ",(0,o.kt)("a",{parentName:"p",href:"/zh-TW/docs/next/admin-api-topics#lookup-of-topic"},"admin API")," docs."),(0,o.kt)("p",null,"Since Pulsar-1.16 it is also possible to perform the lookup within the binary protocol."),(0,o.kt)("p",null,"For the sake of example, let's assume we have a service discovery component running at ",(0,o.kt)("inlineCode",{parentName:"p"},"pulsar://broker.example.com:6650")),(0,o.kt)("p",null,"Individual brokers will be running at ",(0,o.kt)("inlineCode",{parentName:"p"},"pulsar://broker-1.example.com:6650"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pulsar://broker-2.example.com:6650"),", ..."),(0,o.kt)("p",null,"A client can use a connection to the discovery service host to issue a ",(0,o.kt)("inlineCode",{parentName:"p"},"LookupTopic")," command. The response can either be a broker hostname to connect to, or a broker hostname to which retry the lookup."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"LookupTopic")," command has to be used in a connection that has already gone through the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connect")," / ",(0,o.kt)("inlineCode",{parentName:"p"},"Connected")," initial handshake."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Topic lookup",src:a(78644).Z,width:"587",height:"307"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandLookupTopic {\n  "topic" : "persistent://my-property/my-cluster/my-namespace/my-topic",\n  "request_id" : 1,\n  "authoritative" : false\n}\n\n')),(0,o.kt)("p",null,"Fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"topic")," \u2192 Topic name to lookup"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Id of the request that will be passed with its response"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"authoritative")," \u2192 Initial lookup request should use false. When following a redirect response, client should pass the same value contained in the response")),(0,o.kt)("h5",{id:"lookuptopicresponse"},"LookupTopicResponse"),(0,o.kt)("p",null,"Example of response with successful lookup:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandLookupTopicResponse {\n  "request_id" : 1,\n  "response" : "Connect",\n  "brokerServiceUrl" : "pulsar://broker-1.example.com:6650",\n  "brokerServiceUrlTls" : "pulsar+ssl://broker-1.example.com:6651",\n  "authoritative" : true\n}\n\n')),(0,o.kt)("p",null,"Example of lookup response with redirection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandLookupTopicResponse {\n  "request_id" : 1,\n  "response" : "Redirect",\n  "brokerServiceUrl" : "pulsar://broker-2.example.com:6650",\n  "brokerServiceUrlTls" : "pulsar+ssl://broker-2.example.com:6651",\n  "authoritative" : true\n}\n\n')),(0,o.kt)("p",null,"In this second case, we need to reissue the ",(0,o.kt)("inlineCode",{parentName:"p"},"LookupTopic")," command request to ",(0,o.kt)("inlineCode",{parentName:"p"},"broker-2.example.com")," and this broker will be able to give a definitive answer to the lookup request."),(0,o.kt)("h3",{id:"partitioned-topics-discovery"},"Partitioned topics discovery"),(0,o.kt)("p",null,'Partitioned topics metadata discovery is used to find out if a topic is a "partitioned topic" and how many partitions were set up.'),(0,o.kt)("p",null,'If the topic is marked as "partitioned", the client is expected to create multiple producers or consumers, one for each partition, using the ',(0,o.kt)("inlineCode",{parentName:"p"},"partition-X")," suffix."),(0,o.kt)("p",null,"This information only needs to be retrieved the first time a producer or consumer is created. There is no need to do this after reconnections."),(0,o.kt)("p",null,"The discovery of partitioned topics metadata works very similar to the topic lookup. The client send a request to the service discovery address and the response will contain actual metadata."),(0,o.kt)("h5",{id:"command-partitionedtopicmetadata"},"Command PartitionedTopicMetadata"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandPartitionedTopicMetadata {\n  "topic" : "persistent://my-property/my-cluster/my-namespace/my-topic",\n  "request_id" : 1\n}\n\n')),(0,o.kt)("p",null,"Fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"topic")," \u2192 the topic for which to check the partitions metadata"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request_id")," \u2192 Id of the request that will be passed with its response")),(0,o.kt)("h5",{id:"command-partitionedtopicmetadataresponse"},"Command PartitionedTopicMetadataResponse"),(0,o.kt)("p",null,"Example of response with metadata:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'\nmessage CommandPartitionedTopicMetadataResponse {\n  "request_id" : 1,\n  "response" : "Success",\n  "partitions" : 32\n}\n\n')),(0,o.kt)("h2",{id:"protobuf-interface"},"Protobuf interface"),(0,o.kt)("p",null,"All Pulsar's Protobuf definitions can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar/tree/master//pulsar-common/src/main/proto/PulsarApi.proto"},"here"),"."))}u.isMDXComponent=!0},18234:function(e,t,a){t.Z=a.p+"assets/images/binary-protocol-connect-62f0caa199b185efbab5182c49bdaf97.png"},81682:function(e,t,a){t.Z=a.p+"assets/images/binary-protocol-consumer-36dd73884fd5e453b4662e51ad844f1f.png"},21760:function(e,t,a){t.Z=a.p+"assets/images/binary-protocol-producer-2746d3914bebf293532476b046540132.png"},78644:function(e,t,a){t.Z=a.p+"assets/images/binary-protocol-topic-lookup-f013216a8dae04823eb9d39a0f2e264e.png"}}]);