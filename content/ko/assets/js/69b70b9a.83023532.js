"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[26659],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,v=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(v,l(l({ref:t},p),{},{components:a})):n.createElement(v,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:function(e,t,a){a.d(t,{Z:function(){return l}});var n=a(67294),r=a(86010),o="tabItem_Ymn6";function l(e){var t=e.children,a=e.hidden,l=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},65488:function(e,t,a){a.d(t,{Z:function(){return m}});var n=a(87462),r=a(67294),o=a(86010),l=a(72389),i=a(67392),u=a(7094),s=a(12466),p="tabList__CuJ",c="tabItem_LNqP";function d(e){var t,a,l=e.lazy,d=e.block,m=e.defaultValue,v=e.values,k=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=v?v:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.l)(y,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:h[0].props.value;if(null!==b&&!y.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,u.U)(),C=N.tabGroupChoices,T=N.setTabGroupChoices,x=(0,r.useState)(b),w=x[0],I=x[1],P=[],J=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var S=C[k];null!=S&&S!==w&&y.some((function(e){return e.value===S}))&&I(S)}var Z=function(e){var t=e.currentTarget,a=P.indexOf(t),n=y[a].value;n!==w&&(J(t),I(n),null!=k&&T(k,String(n)))},j=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,r=P.indexOf(e.currentTarget)+1;a=null!=(n=P[r])?n:P[0];break;case"ArrowLeft":var o,l=P.indexOf(e.currentTarget)-1;a=null!=(o=P[l])?o:P[P.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},f)},y.map((function(e){var t=e.value,a=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return P.push(e)},onKeyDown:j,onFocus:Z,onClick:Z},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":w===t})}),null!=a?a:t)}))),l?(0,r.cloneElement)(h.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function m(e){var t=(0,l.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},24794:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),l=a(65488),i=a(85162),u=["components"],s={id:"functions-develop-state",title:"Configure state storage",sidebar_label:"Configure state storage"},p=void 0,c={unversionedId:"functions-develop-state",id:"functions-develop-state",title:"Configure state storage",description:"Pulsar Functions use Apache BookKeeper as a state storage interface. Pulsar integrates with BookKeeper table service to store state for functions. For example, a WordCount function can store the state of its counters into BookKeeper table service via State APIs.",source:"@site/docs/functions-develop-state.md",sourceDirName:".",slug:"/functions-develop-state",permalink:"/ko/docs/next/functions-develop-state",draft:!1,editUrl:"https://github.com/apache/pulsar/edit/master/site2/docs/functions-develop-state.md",tags:[],version:"current",frontMatter:{id:"functions-develop-state",title:"Configure state storage",sidebar_label:"Configure state storage"},sidebar:"docsSidebar",previous:{title:"Enable security on functions",permalink:"/ko/docs/next/functions-develop-security"},next:{title:"Call Pulsar admin APIs",permalink:"/ko/docs/next/functions-develop-admin-api"}},d={},m=[{value:"Call state APIs",id:"call-state-apis",level:2},{value:"Increment counter",id:"increment-counter",level:2},{value:"Retrieve counter",id:"retrieve-counter",level:3},{value:"Update state",id:"update-state",level:3},{value:"Retrieve state",id:"retrieve-state",level:3},{value:"Delete state",id:"delete-state",level:3},{value:"Query state via CLI",id:"query-state-via-cli",level:2},{value:"Example",id:"example",level:2}],v={toc:m};function k(e){var t=e.components,a=(0,r.Z)(e,u);return(0,o.kt)("wrapper",(0,n.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Pulsar Functions use ",(0,o.kt)("a",{parentName:"p",href:"https://bookkeeper.apache.org"},"Apache BookKeeper")," as a state storage interface. Pulsar integrates with BookKeeper ",(0,o.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/155xAwWv5IdOitHh1NVMEwCMGgB28M3FyMiQSxEpjE-Y/edit#heading=h.56rbh52koe3f"},"table service")," to store state for functions. For example, a ",(0,o.kt)("inlineCode",{parentName:"p"},"WordCount")," function can store the state of its counters into BookKeeper table service via ",(0,o.kt)("a",{parentName:"p",href:"#call-state-apis"},"State APIs"),"."),(0,o.kt)("p",null,"States are key-value pairs, where a key is a string and its value is arbitrary binary data - counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual function, and shared between instances of that function."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"State storage is ",(0,o.kt)("strong",{parentName:"p"},"not")," available for Go functions."))),(0,o.kt)("h2",{id:"call-state-apis"},"Call state APIs"),(0,o.kt)("p",null,"Pulsar Functions expose APIs for mutating and accessing ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),". These APIs are available in the ",(0,o.kt)("a",{parentName:"p",href:"/ko/docs/next/functions-concepts#context"},"Context")," object when you use ",(0,o.kt)("a",{parentName:"p",href:"/ko/docs/next/functions-develop-api"},"Java/Python SDK")," to develop functions."),(0,o.kt)("p",null,"The following table outlines the states that can be accessed within Java and Python functions."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"State-related API"),(0,o.kt)("th",{parentName:"tr",align:null},"Java"),(0,o.kt)("th",{parentName:"tr",align:null},"Python"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#increment-counter"},"Increment counter")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"incrCounter")," ",(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"incrCounterAsync")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"incr_counter"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#retrieve-counter"},"Retrieve counter")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"getCounter")," ",(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"getCounterAsync")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"get_counter"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#update-state"},"Update state")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"putState")," ",(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"putStateAsync")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"put_state"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#retrieve-state"},"Retrieve state")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"getState")," ",(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"getStateAsync")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"get_state"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#delete-state"},"Delete state")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"deleteState")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"del_counter"))))),(0,o.kt)("h2",{id:"increment-counter"},"Increment counter"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounter")," to increment the counter of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," by the given ",(0,o.kt)("inlineCode",{parentName:"p"},"amount"),".\nIf the ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," does not exist, a new key is created."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Increment the builtin distributed counter referred by key\n     * @param key The name of the key\n     * @param amount The amount to be incremented\n     */\n    void incrCounter(String key, long amount);\n\n"))),(0,o.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n  def incr_counter(self, key, amount):\n    """incr the counter of a given key in the managed state"""\n\n')))),(0,o.kt)("p",null,"To asynchronously increment the counter, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounterAsync"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n     /**\n     * Increment the builtin distributed counter referred by key\n     * but dont wait for the completion of the increment operation\n     *\n     * @param key The name of the key\n     * @param amount The amount to be incremented\n     */\n    CompletableFuture<Void> incrCounterAsync(String key, long amount);\n\n")))),(0,o.kt)("h3",{id:"retrieve-counter"},"Retrieve counter"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getCounter")," to retrieve the counter of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," mutated by ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounter"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Retrieve the counter value for the key.\n     *\n     * @param key name of the key\n     * @return the amount of the counter value for this key\n     */\n    long getCounter(String key);\n\n"))),(0,o.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n  def get_counter(self, key):\n    """get the counter of a given key in the managed state"""\n\n')))),(0,o.kt)("p",null,"To asynchronously retrieve the counter mutated by ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounterAsync"),", you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getCounterAsync"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n     /**\n     * Retrieve the counter value for the key, but don't wait\n     * for the operation to be completed\n     *\n     * @param key name of the key\n     * @return the amount of the counter value for this key\n     */\n    CompletableFuture<Long> getCounterAsync(String key);\n\n")))),(0,o.kt)("h3",{id:"update-state"},"Update state"),(0,o.kt)("p",null,"Besides the ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," API, Pulsar also exposes a general key/value API for functions to store and update the state of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Update the state value for the key.\n     *\n     * @param key name of the key\n     * @param value state value of the key\n     */\n    void putState(String key, ByteBuffer value);\n\n"))),(0,o.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n  def put_state(self, key, value):\n    """update the value of a given key in the managed state"""\n\n')))),(0,o.kt)("p",null,"To asynchronously update the state of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),", you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"putStateAsync"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Update the state value for the key, but don't wait for the operation to be completed\n     *\n     * @param key name of the key\n     * @param value state value of the key\n     */\n    CompletableFuture<Void> putStateAsync(String key, ByteBuffer value);\n\n")))),(0,o.kt)("h3",{id:"retrieve-state"},"Retrieve state"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getState")," to retrieve the state of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Retrieve the state value for the key.\n     *\n     * @param key name of the key\n     * @return the state value for the key.\n     */\n    ByteBuffer getState(String key);\n\n"))),(0,o.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n  def get_state(self, key):\n    """get the value of a given key in the managed state"""\n\n')))),(0,o.kt)("p",null,"To asynchronously retrieve the state of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),", you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getStateAsync"),"."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Retrieve the state value for the key, but don't wait for the operation to be completed\n     *\n     * @param key name of the key\n     * @return the state value for the key.\n     */\n    CompletableFuture<ByteBuffer> getStateAsync(String key);\n\n")))),(0,o.kt)("h3",{id:"delete-state"},"Delete state"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Both counters and binary values share the same keyspace, so this API deletes either type."))),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Delete the state value for the key.\n     *\n     * @param key   name of the key\n     */\n    void deleteState(String key);\n\n")))),(0,o.kt)("h2",{id:"query-state-via-cli"},"Query state via CLI"),(0,o.kt)("p",null,"Besides using the ",(0,o.kt)("a",{parentName:"p",href:"#call-state-apis"},"State APIs")," to store the state of functions in Pulsar's state storage and retrieve it back from the storage, you can use CLI commands to query the state of functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\nbin/pulsar-admin functions querystate \\\n    --tenant <tenant> \\\n    --namespace <namespace> \\\n    --name <function-name> \\\n    --state-storage-url <bookkeeper-service-url> \\\n    --key <state-key> \\\n    [---watch]\n\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"--watch")," is specified, the CLI tool keeps running to get the latest value of the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"state-key"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"The example of ",(0,o.kt)("inlineCode",{parentName:"p"},"WordCountFunction")," demonstrates how ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," is stored within Pulsar Functions."),(0,o.kt)(l.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,o.kt)("p",null,"The logic of {@inject: github:",(0,o.kt)("inlineCode",{parentName:"p"},"WordCountFunction"),":/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/WordCountFunction.java} is simple and straightforward:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The function splits the received ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," into multiple words using regex ",(0,o.kt)("inlineCode",{parentName:"p"},"\\\\."),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For each ",(0,o.kt)("inlineCode",{parentName:"p"},"word"),", the function increments ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," by 1 via ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounter(key, amount)"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\nimport org.apache.pulsar.functions.api.Context;\nimport org.apache.pulsar.functions.api.Function;\n\nimport java.util.Arrays;\n\npublic class WordCountFunction implements Function<String, Void> {\n    @Override\n    public Void process(String input, Context context) throws Exception {\n        Arrays.asList(input.split("\\\\.")).forEach(word -> context.incrCounter(word, 1));\n        return null;\n    }\n}\n\n'))))),(0,o.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,o.kt)("p",null,"The logic of this ",(0,o.kt)("inlineCode",{parentName:"p"},"WordCount")," function is simple and straightforward:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The function first splits the received string into multiple words.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For each ",(0,o.kt)("inlineCode",{parentName:"p"},"word"),", the function increments ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," by 1 via ",(0,o.kt)("inlineCode",{parentName:"p"},"incr_counter(key, amount)"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom pulsar import Function\n\nclass WordCount(Function):\n    def process(self, item, context):\n        for word in item.split():\n            context.incr_counter(word, 1)\n\n")))))))}k.isMDXComponent=!0}}]);