"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[50686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=p(t),d=a,m=y["".concat(l,".").concat(d)]||y[d]||u[d]||o;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(67294),a=t(86010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(87462),a=t(67294),o=t(86010),i=t(72389),s=t(67392),l=t(7094),p=t(12466);const c="tabList__CuJ",u="tabItem_LNqP";function y(e){var n;const{lazy:t,block:i,defaultValue:y,values:d,groupId:m,className:k}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=d??b.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),g=(0,s.l)(f,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===y?y:y??(null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)??b[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:C}=(0,l.U)(),[N,K]=(0,a.useState)(v),R=[],{blockElementScrollPositionUntilNextRender:_}=(0,p.o5)();if(null!=m){const e=h[m];null!=e&&e!==N&&f.some((n=>n.value===e))&&K(e)}const P=e=>{const n=e.currentTarget,t=R.indexOf(n),r=f[t].value;r!==N&&(_(n),K(r),null!=m&&C(m,String(r)))},T=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=R.indexOf(e.currentTarget)+1;t=R[n]??R[0];break}case"ArrowLeft":{const n=R.indexOf(e.currentTarget)-1;t=R[n]??R[R.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},k)},f.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>R.push(e),onKeyDown:T,onFocus:P,onClick:P},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":N===n})}),t??n)}))),t?(0,a.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function d(e){const n=(0,i.Z)();return a.createElement(y,(0,r.Z)({key:String(n)},e))}},45424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var r=t(87462),a=(t(67294),t(3905)),o=t(65488),i=t(85162);const s={id:"cookbooks-encryption",title:"Configure end-to-end encryption",sidebar_label:"Configure end-to-end encryption"},l=void 0,p={unversionedId:"cookbooks-encryption",id:"cookbooks-encryption",title:"Configure end-to-end encryption",description:"Pulsar encryption allows clients to encrypt messages at producers and decrypt messages at consumers.",source:"@site/docs/cookbooks-encryption.md",sourceDirName:".",slug:"/cookbooks-encryption",permalink:"/zh-CN/docs/next/cookbooks-encryption",draft:!1,editUrl:"https://github.com/apache/pulsar/edit/master/site2/docs/cookbooks-encryption.md",tags:[],version:"current",frontMatter:{id:"cookbooks-encryption",title:"Configure end-to-end encryption",sidebar_label:"Configure end-to-end encryption"},sidebar:"docsSidebar",previous:{title:"Message retention and expiry",permalink:"/zh-CN/docs/next/cookbooks-retention-expiry"},next:{title:"Message queue",permalink:"/zh-CN/docs/next/cookbooks-message-queue"}},c={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure end-to-end encryption",id:"configure-end-to-end-encryption",level:2},{value:"Encrypt a message with multiple keys",id:"encrypt-a-message-with-multiple-keys",level:2}],y={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/zh-CN/docs/next/security-encryption"},"Pulsar encryption")," allows clients to encrypt messages at producers and decrypt messages at consumers."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pulsar Java/Python/C++/Node.js client 2.7.1 or later versions."),(0,a.kt)("li",{parentName:"ul"},"Pulsar Go client 0.6.0 or later versions.")),(0,a.kt)("h2",{id:"configure-end-to-end-encryption"},"Configure end-to-end encryption"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create both public and private key pairs."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"ECDSA\uff08for Java and Go clients)"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"openssl ecparam -name secp521r1 -genkey -param_enc explicit -out test_ecdsa_privkey.pem\nopenssl ec -in test_ecdsa_privkey.pem -pubout -outform pem -out test_ecdsa_pubkey.pem\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"RSA (for Python, C++ and Node.js clients)"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"openssl genrsa -out test_rsa_privkey.pem 2048\nopenssl rsa -in test_rsa_privkey.pem -pubout -outform pkcs8 -out test_rsa_pubkey.pem\n"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Configure a ",(0,a.kt)("inlineCode",{parentName:"p"},"CryptoKeyReader")," on producers, consumers or readers."),(0,a.kt)(o.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"},{label:"C++",value:"C++"},{label:"Go",value:"Go"},{label:"Node.js",value:"Node.js"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'PulsarClient pulsarClient = PulsarClient.builder().serviceUrl("pulsar://localhost:6650").build();\nString topic = "persistent://my-tenant/my-ns/my-topic";\n// RawFileKeyReader is just an example implementation that\'s not provided by Pulsar\nCryptoKeyReader keyReader = new RawFileKeyReader("test_ecdsa_pubkey.pem", "test_ecdsa_privkey.pem");\n\nProducer<byte[]> producer = pulsarClient.newProducer()\n     .topic(topic)\n     .cryptoKeyReader(keyReader)\n     .addEncryptionKey("myappkey")\n     .create();\n\nConsumer<byte[]> consumer = pulsarClient.newConsumer()\n     .topic(topic)\n     .subscriptionName("my-subscriber-name")\n     .cryptoKeyReader(keyReader)\n     .subscribe();\n\nReader<byte[]> reader = pulsarClient.newReader()\n     .topic(topic)\n     .startMessageId(MessageId.earliest)\n     .cryptoKeyReader(keyReader)\n     .create();\n'))),(0,a.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from pulsar import Client, CryptoKeyReader\n\nclient = Client('pulsar://localhost:6650')\ntopic = 'my-topic'\n# CryptoKeyReader is a built-in implementation that reads public key and private key from files\nkey_reader = CryptoKeyReader('test_rsa_pubkey.pem', 'test_rsa_privkey.pem')\n\nproducer = client.create_producer(\n    topic=topic,\n    encryption_key='myappkey',\n    crypto_key_reader=key_reader\n)\n\nconsumer = client.subscribe(\n    topic=topic,\n    subscription_name='my-subscriber-name',\n    crypto_key_reader=key_reader\n)\n\nreader = client.create_reader(\n    topic=topic,\n    start_message_id=MessageId.earliest,\n    crypto_key_reader=key_reader\n)\n\nclient.close()\n"))),(0,a.kt)(i.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'Client client("pulsar://localhost:6650");\nstd::string topic = "persistent://my-tenant/my-ns/my-topic";\n// DefaultCryptoKeyReader is a built-in implementation that reads public key and private key from files\nauto keyReader = std::make_shared<DefaultCryptoKeyReader>("test_rsa_pubkey.pem", "test_rsa_privkey.pem");\n\nProducer producer;\nProducerConfiguration producerConf;\nproducerConf.setCryptoKeyReader(keyReader);\nproducerConf.addEncryptionKey("myappkey");\nclient.createProducer(topic, producerConf, producer);\n\nConsumer consumer;\nConsumerConfiguration consumerConf;\nconsumerConf.setCryptoKeyReader(keyReader);\nclient.subscribe(topic, "my-subscriber-name", consumerConf, consumer);\n\nReader reader;\nReaderConfiguration readerConf;\nreaderConf.setCryptoKeyReader(keyReader);\nclient.createReader(topic, MessageId::earliest(), readerConf, reader);\n'))),(0,a.kt)(i.Z,{value:"Go",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-go"},'client, err := pulsar.NewClient(pulsar.ClientOptions{\n URL: "pulsar://localhost:6650",\n})\nif err != nil {\n   log.Fatal(err)\n}\n\ndefer client.Close()\n\ntopic := "persistent://my-tenant/my-ns/my-topic"\nkeyReader := crypto.NewFileKeyReader("test_ecdsa_pubkey.pem", "test_ecdsa_privkey.pem")\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n   Topic: topic,\n   Encryption: &pulsar.ProducerEncryptionInfo{\n    KeyReader: keyReader,\n    Keys:      []string{"myappkey"},\n   },\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer producer.Close()\n\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n   Topic:            topic,\n   SubscriptionName: "my-subscriber-name",\n   Decryption: &pulsar.MessageDecryptionInfo{\n       KeyReader: keyReader,\n   },\n})\nif err != nil {\n   log.Fatal(err)\n}\ndefer consumer.Close()\n\nreader, err := client.CreateReader(pulsar.ReaderOptions{\n   Topic: topic,\n   Decryption: &pulsar.MessageDecryptionInfo{\n       KeyReader: keyReader,\n   },\n})\nif err != nil {\n   log.Fatal(err)\n}\ndefer reader.Close()\n'))),(0,a.kt)(i.Z,{value:"Node.js",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const Pulsar = require('pulsar-client');\n\nconst topic = 'persistent://my-tenant/my-ns/my-topic';\n\n(async () => {\n// Create a client\nconst client = new Pulsar.Client({\n    serviceUrl: 'pulsar://localhost:6650',\n    operationTimeoutSeconds: 30,\n});\n\n// Create a producer\nconst producer = await client.createProducer({\n    topic: topic,\n    sendTimeoutMs: 30000,\n    batchingEnabled: true,\n    publicKeyPath: \"test_rsa_pubkey.pem\",\n    encryptionKey: \"encryption-key\"\n});\n\n// Create a consumer\nconst consumer = await client.subscribe({\n    topic: topic,\n    subscription: 'my-subscriber-name',\n    subscriptionType: 'Shared',\n    ackTimeoutMs: 10000,\n    privateKeyPath: \"test_rsa_privkey.pem\"\n});\nawait consumer.close();\nawait producer.close();\nawait client.close();\n})();\n"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Optional: customize the ",(0,a.kt)("inlineCode",{parentName:"p"},"CryptoKeyReader")," implementation."),(0,a.kt)(o.Z,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"},{label:"C++",value:"C++"},{label:"Go",value:"Go"},{label:"Node.js",value:"Node.js"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Java",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'class RawFileKeyReader implements CryptoKeyReader {\n\n String publicKeyFile = "";\n String privateKeyFile = "";\n\n RawFileKeyReader(String pubKeyFile, String privKeyFile) {\n     publicKeyFile = pubKeyFile;\n     privateKeyFile = privKeyFile;\n }\n\n @Override\n public EncryptionKeyInfo getPublicKey(String keyName, Map<String, String> keyMeta) {\n     EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n     try {\n         keyInfo.setKey(Files.readAllBytes(Paths.get(publicKeyFile)));\n     } catch (IOException e) {\n         System.out.println("ERROR: Failed to read public key from file " + publicKeyFile);\n         e.printStackTrace();\n     }\n     return keyInfo;\n }\n\n @Override\n public EncryptionKeyInfo getPrivateKey(String keyName, Map<String, String> keyMeta) {\n     EncryptionKeyInfo keyInfo = new EncryptionKeyInfo();\n     try {\n         keyInfo.setKey(Files.readAllBytes(Paths.get(privateKeyFile)));\n     } catch (IOException e) {\n         System.out.println("ERROR: Failed to read private key from file " + privateKeyFile);\n         e.printStackTrace();\n     }\n     return keyInfo;\n }\n}\n'))),(0,a.kt)(i.Z,{value:"Python",mdxType:"TabItem"},(0,a.kt)("p",{parentName:"li"},"Currently, customizing the ",(0,a.kt)("inlineCode",{parentName:"p"},"CryptoKeyReader")," implementation is not supported in Python. However, you can use the default implementation by specifying the path of the private key and public keys.")),(0,a.kt)(i.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class CustomCryptoKeyReader : public CryptoKeyReader {\n public:\n Result getPublicKey(const std::string& keyName, std::map<std::string, std::string>& metadata,\n                     EncryptionKeyInfo& encKeyInfo) const override {\n     // TODO\n     return ResultOk;\n }\n\n Result getPrivateKey(const std::string& keyName, std::map<std::string, std::string>& metadata,\n                     EncryptionKeyInfo& encKeyInfo) const override {\n     // TODO\n     return ResultOk;\n }\n};\n"))),(0,a.kt)(i.Z,{value:"Go",mdxType:"TabItem"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type CustomKeyReader struct {\n   publicKeyPath  string\n   privateKeyPath string\n}\n\nfunc (c *CustomKeyReader) PublicKey(keyName string, keyMeta map[string]string) (*EncryptionKeyInfo, error) {\n   keyInfo := &EncryptionKeyInfo{}\n   // TODO\n   return keyInfo, nil\n}\n\n// PrivateKey read private key from the given path\nfunc (c *CustomKeyReader) PrivateKey(keyName string, keyMeta map[string]string) (*EncryptionKeyInfo, error) {\n   keyInfo := &EncryptionKeyInfo{}\n   // TODO\n   return keyInfo, nil\n}\n"))),(0,a.kt)(i.Z,{value:"Node.js",mdxType:"TabItem"},(0,a.kt)("p",{parentName:"li"},"Currently, customizing the ",(0,a.kt)("inlineCode",{parentName:"p"},"CryptoKeyReader")," implementation is not supported in Python. However, you can use the default implementation by specifying the path of the private key and public keys."))))),(0,a.kt)("h2",{id:"encrypt-a-message-with-multiple-keys"},"Encrypt a message with multiple keys"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This is only available for Java clients.")),(0,a.kt)("p",null,"You can encrypt a message with more than one key. Producers add all such keys to the config and consumers can decrypt the message as long as they have access to at least one of the keys. Any one of the keys used for encrypting the message is sufficient to decrypt the message. "),(0,a.kt)("p",null,"For example, encrypt the messages using 2 keys (",(0,a.kt)("inlineCode",{parentName:"p"},"myapp.messagekey1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"myapp.messagekey2"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'PulsarClient.newProducer().addEncryptionKey("myapp.messagekey1").addEncryptionKey("myapp.messagekey2");\n')))}d.isMDXComponent=!0}}]);